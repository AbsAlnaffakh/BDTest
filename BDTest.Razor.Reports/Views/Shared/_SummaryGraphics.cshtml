@using BDTest
@using BDTest.Razor.Reports.Constants
@using BDTest.Razor.Reports.Extensions
@using BDTest.Test
@using Microsoft.AspNetCore.Http.Extensions
@model BDTest.Razor.Reports.Models.ViewModels.SummaryViewModel
@{
    var total = Model.Scenarios.Count;
    var passed = Model.Scenarios.Count(scenario => scenario.Status == Status.Passed);
    var passedPercent = GetPercentage(passed, total);
    var failed = Model.Scenarios.Count(scenario => scenario.Status == Status.Failed);
    var failedPercent = GetPercentage(failed, total);
    var skipped = Model.Scenarios.Count(scenario => scenario.Status == Status.Skipped);
    var notImplemented = Model.Scenarios.Count(scenario => scenario.Status == Status.NotImplemented);
    var inconclusive = Model.Scenarios.Count(scenario => scenario.Status == Status.Inconclusive);
    var otherPercent = GetPercentage(skipped + notImplemented + inconclusive, total);
    var testTimer = BDTestUtil.GetTestTimer(Model.Scenarios, Model.TotalReportData);

    var currentUri = new Uri(Context.Request.GetEncodedUrl());
    _isSummaryPage = currentUri.AbsolutePath.Contains("/summary");

    var pointerClassIfSummaryPage = _isSummaryPage ? "pointer" : string.Empty;
    var currentId = currentUri.ToString().Split("report/")[1].Split("/")[0];
    var allScenariosUri = currentUri.WithPath($"bdtest/report/{currentId}/all-scenarios");
}

@functions
{
    private double GetPercentage(double scenarioCount, double total)
    {
        return (scenarioCount / total) * 100;
    }
}

<div class="progress mb-5">
      <div class="progress-bar bg-success progress-bar-striped progress-bar-animated" role="progressbar" style="width: @passedPercent%" aria-valuenow="@passedPercent" aria-valuemin="0" aria-valuemax="100"></div>
      <div class="progress-bar bg-danger progress-bar-striped progress-bar-animated" role="progressbar" style="width: @failedPercent%" aria-valuenow="@failedPercent" aria-valuemin="0" aria-valuemax="100"></div>
      <div class="progress-bar bg-warning progress-bar-striped progress-bar-animated" role="progressbar" style="width: @otherPercent%" aria-valuenow="@otherPercent" aria-valuemin="0" aria-valuemax="100"></div>
    </div>

<div id="summary-boxes" class="d-grid justify-content-center mx-auto">
    
        <button type="button" class="btn btn-primary btn-lg position-relative mb-5 py-3" onclick="@MakeUrl(allScenariosUri)">
          @total  <span class="badge position-absolute start-50 top-0 translate-middle bg-primary">Tests Run</span>
        </button>

            <div class="d-flex justify-content-center">
                
                <button type="button" class="btn btn-dark btn-lg position-relative mb-5 mx-3 py-3" onclick="@MakeUrl(allScenariosUri)">
                    @testTimer.TestsStartedAt.ToStringForReport() <span class="badge position-absolute start-50 top-0 translate-middle bg-dark">Started at</span>
                </button>
                
                <button type="button" class="btn btn-dark btn-lg position-relative mb-5 mx-3 py-3" onclick="@MakeUrl(allScenariosUri)">
                    @testTimer.ElapsedTime.ToPrettyFormat()<span class="badge position-absolute start-50 top-0 translate-middle bg-dark">Time Taken</span>
                </button>
                
                <button type="button" class="btn btn-dark btn-lg position-relative mb-5 mx-3 py-3" onclick="@MakeUrl(allScenariosUri)">
                    @testTimer.TestsFinishedAt.ToStringForReport() <span class="badge position-absolute start-50 top-0 translate-middle bg-dark">Finished At</span>
                </button>
            </div>
    
        <div class="d-flex justify-content-center">
            
            <button type="button" class="btn btn-success btn-lg position-relative mb-5 mx-2 py-3" style="min-width: 12rem" onclick="@MakeUrl(allScenariosUri.WithQueryParameter(StatusConstants.FilterByStatusQueryParameterName, Status.Passed.ToString()))">
                @passed <span class="badge position-absolute start-50 top-0 translate-middle bg-success">Passed</span>
            </button>

            <button type="button" class="btn btn-warning btn-lg position-relative mb-5 mx-2 py-3" style="min-width: 12rem" onclick="@MakeUrl(allScenariosUri.WithQueryParameter(StatusConstants.FilterByStatusQueryParameterName, Status.Skipped.ToString()))">
                @skipped <span class="badge position-absolute start-50 top-0 translate-middle bg-warning">Skipped</span>
            </button>
            
            <button type="button" class="btn btn-warning btn-lg position-relative mb-5 mx-2 py-3" style="min-width: 12rem" onclick="@MakeUrl(allScenariosUri.WithQueryParameter(StatusConstants.FilterByStatusQueryParameterName, Status.NotImplemented.ToString()))">
                @notImplemented <span class="badge position-absolute start-50 top-0 translate-middle bg-warning">Not Implemented</span>
            </button>
            
            <button type="button" class="btn btn-warning btn-lg position-relative mb-5 mx-2 py-3" style="min-width: 12rem" onclick="@MakeUrl(allScenariosUri.WithQueryParameter(StatusConstants.FilterByStatusQueryParameterName, Status.Inconclusive.ToString()))">
                @inconclusive <span class="badge position-absolute start-50 top-0 translate-middle bg-warning">Inconclusive</span>
            </button>
            
            <button type="button" class="btn btn-danger btn-lg position-relative mb-5 mx-2 py-3" style="min-width: 12rem" onclick="@MakeUrl(allScenariosUri.WithQueryParameter(StatusConstants.FilterByStatusQueryParameterName, Status.Failed.ToString()))">
                @failed <span class="badge position-absolute start-50 top-0 translate-middle bg-danger">Failed</span>
            </button>
        </div>
</div>

@functions
{
    private string MakeUrl(Uri url)
    {
        return _isSummaryPage ? $"window.location = '{url}'" : "return false;";
    }

    private bool _isSummaryPage;
}
