@using BDTest.Razor.Reports.Extensions
@using BDTest.Razor.Reports.Helpers
@using BDTest.Razor.Reports.Models
@using BDTest.Razor.Reports.Models.ViewModels
@using BDTest.Test
@model IGrouping<string, Scenario>[]

@{
    ViewBag.Title = "Scenarios";
    Layout = "_Layout";
    
    var scenarioId = Context.Request.GetQueryParameter("scenarioId");
    var reportId = ViewBag.Id;

    var currentPageString = Context.GetCurrentPageNumber();

    var pager = new Pager<IGrouping<string, Scenario>>(Model, currentPageString);

    if (!string.IsNullOrEmpty(scenarioId))
    {
        var pageNumberOfScenario = pager.GetPageNumberWhere(grouping => grouping.ToList().FirstOrDefault(scenario => scenario.Guid == scenarioId) != null);
        if (pageNumberOfScenario != null)
        {
            pager = new Pager<IGrouping<string, Scenario>>(Model, pageNumberOfScenario.Value.ToString());
        }
    }
}

@await Html.PartialAsync("_TestPageHeaderHero", new TestPageHeaderHeroViewModel
{
    Title = "Scenarios",
    Description = "Here are the scenarios in this test run"
})

<div class="container mt-6">
    <nav class="level">
        <div class="level-item">
            @await Html.PartialAsync("_PaginationButtons", pager.GetPaginationInformation())
        </div>
    </nav>
</div>

    <div class="container-fluid">
    <div class="box" id="all-scenarios-container">
        <div class="btn-group" role="group" >
            @await Html.PartialAsync("_StatusDropdown", new StatusDropdownViewModel { IncludeScript = true })
            @await Html.PartialAsync("_OrderByDropdown")
            <div class="scenarios-buttons-row">
                <button class="btn btn-light" onclick="expandScenarioGroups(toggleActions.EXPAND)">Expand All</button>
                <button class="btn btn-light" onclick="expandScenarioGroups(toggleActions.COLLAPSE)">Collapse All</button>
            </div>
        </div>

        <div class="scrollable-table-container">
            <table class="table table-hover">
                <thead>
                <tr>
                    @* Expand Toggle *@
                    <th scope="col"></th>
                    <th scope="col">Scenario</th>
                    <th scope="col">Status</th>
                    <th scope="col">Duration</th>
                    <th scope="col">Start</th>
                    <th scope="col">End</th>
                </tr>
                </thead>
                <tbody>

                @{ var scenarioIndex = new ReferenceInt(0); }
                @{ var groupedScenariosCount = new ReferenceInt(0); }
                @foreach (var groupedScenarios in pager.ItemsForCurrentPage)
                {
                    @await Html.PartialAsync("_GroupedScenarioTableRow", new GroupedScenarioViewModel
                    {
                        Scenarios = groupedScenarios.ToList(),
                        ScenarioIndex = scenarioIndex,
                        GroupedScenarioIndex = groupedScenariosCount,
                    })
                }

                </tbody>
            </table>
        </div>

        @if (pager.TotalItems == 0)
        {
            @(await Html.PartialAsync("_WowSuchEmpty"))
        }
    </div>


        @{
            var allScenarios = pager.ItemsForCurrentPage.SelectMany(groupedScenarios => groupedScenarios).ToList();
        }
        @* @for (var index = 0; index < allScenarios.Count; index++) *@
        @* { *@
        @*     var lastScenario = allScenarios.ElementAtOrDefault(index - 1); *@
        @*     var scenario = allScenarios[index]; *@
        @*     var nextScenario = allScenarios.ElementAtOrDefault(index + 1); *@
        @*      *@
        @*     @await Html.PartialAsync("_ScenarioModalPopup", new ScenarioModalViewModel *@
        @*     { *@
        @*         LastScenario = lastScenario, *@
        @*         Scenario = scenario, *@
        @*         NextScenario = nextScenario *@
        @*     }) *@
        @* } *@

    </div>

<div class="container mb-6">
    <nav class="level">
        <div class="level-item">
            @await Html.PartialAsync("_PaginationButtons", pager.GetPaginationInformation())
        </div>
    </nav>
</div>

<script>
    let scenarioRows = document.getElementsByClassName("scenario-row");
    for (let scenarioRow of scenarioRows) {
        scenarioRow.addEventListener("click", function() {
            let scenarioId = scenarioRow.getAttribute("scenario-id");
            window.location.href = '@Context.GetBaseUrl()/bdtest/report/@ViewBag.Id/scenario/' + scenarioId;
            spinnerCursor();
        });
    }
</script>