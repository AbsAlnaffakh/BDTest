@using BDTest.Maps
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using BDTest.Test
@model List<BDTest.Maps.BDTestOutputModel>

@{
    ViewBag.Title = "Flakiness";
    Layout = "_Layout";

    var allScenarios = Model.SelectMany(model => model.Scenarios)
        .Where(scenario => scenario != null);
    var groupedScenarios = allScenarios.GroupBy(scenario => new ScenarioGroupKey
    {
        StoryText = scenario.GetStoryText(),
        ScenarioText = scenario.GetScenarioText()
    })
        .Where(group => group.Any(scenario => scenario.Status == Status.Failed))
        .OrderBy(group => GetPassRate(group.ToList()));
}

<section class="hero is-info">
    <div class="hero-body">
        <div class="container">
            <h1 class="title">
                Flakey Tests
            </h1>
            <h2 class="subtitle">
                Here are how your flakey your tests are across multiple runs:
            </h2>
        </div>
    </div>
</section>

<section class="section">
    
    <div class="container">
        <div class="box">
            
            @if (groupedScenarios.All(x => x.GetTotalStatus() == Status.Passed))
            {
                <div class="has-text-centered">
                    <h2 class="title is-4">No Flakey Tests!</h2>
                </div>
            }
            else
            {
                <div class="hero-body">
                    <h1 class="title">Scenarios:</h1>
                </div>
                var index = 0;
                @foreach (var scenarioGroup in groupedScenarios)
                {
                    index++;
                    var scenarios = scenarioGroup.OrderBy(x => x.StartTime).ToList();

                    var scenarioText = scenarioGroup.Key.ScenarioText;

                    var failed = scenarios.Count(scenario => scenario.Status == Status.Failed);
                    var passed = scenarios.Count(scenario => scenario.Status == Status.Passed);
                    var passRate = Math.Round(GetPassRate(scenarios), 2);

                    <div class="card">
                        <div class="card-content">
                            <h2 class="subtitle mb-0">@scenarioText</h2>
                            <span>Passed: </span>
                            <span class="tag is-medium px-5 is-success">
                                @passed
                            </span>
                            <span>Failed: </span>
                            <span class="tag is-medium px-5 is-danger">
                                @failed
                            </span>
                            <span>Pass Rate: </span>
                            <span class="tag is-medium px-5 is-info">
                                @passRate%
                            </span>
                            
                            <div class="columns hero-body">
                                <div class="column is-half">
                                    <h5 class="subtitle is-5">Statuses</h5>
                                    <canvas id="success-trend-chart-@index"></canvas>
                                </div>
                                <div class="column is-half">
                                    <h5 class="subtitle is-5">Durations</h5>
                                    <canvas id="duration-trend-chart-@index"></canvas>
                                </div>
                            </div>

                            @await Html.PartialAsync("_Javascript_Flakey_Duration_Chart", new ChartViewModel { Index = index, Scenarios = scenarios})
                            @await Html.PartialAsync("_Javascript_Flakey_Status_Chart", new ChartViewModel { Index = index, Scenarios = scenarios})
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</section>

@functions 
{
    private BDTestOutputModel GetOutputModel(Scenario scenario)
    {
        return Model.FirstOrDefault(bdTestOutputModel => bdTestOutputModel.Scenarios.Any(s => s.Guid == scenario.Guid));
    }

    private static double GetPassRate(IReadOnlyCollection<Scenario> scenarios)
    {
        var failed = scenarios.Count(x => x.Status == Status.Failed);
        return 100 - (((double)failed / scenarios.Count) * 100);
    }
}