@using BDTest.Maps
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels
@using BDTest.Test
@model List<BDTest.Maps.BDTestOutputModel>

@{
    ViewBag.Title = "Flakiness";
    Layout = "_Layout";

    var allScenarios = Model.SelectMany(model => model.Scenarios)
        .Where(scenario => scenario != null);
    var groupedScenarios = allScenarios.GroupBy(scenario => new ScenarioGroupKey
    {
        StoryText = scenario.GetStoryText(),
        ScenarioText = scenario.GetScenarioText()
    })
        .Where(group => group.Any(scenario => scenario.Status == Status.Failed))
        .OrderBy(group => GetPassRate(group.ToList()));
}

@await Html.PartialAsync("_TestPageHeaderHero", new TestPageHeaderHeroViewModel
{
    Title = "Flakey Tests",
    Description = "Here are how your flakey your tests are across multiple runs"
})

<div class="container-fluid">

    @if (groupedScenarios.All(x => x.GetTotalStatus() == Status.Passed))
    {
        <div class="has-text-centered">
            <h2 class="title is-4">No Flakey Tests!</h2>
        </div>
    }
    else
    {
        var index = 0;
        @foreach (var scenarioGroup in groupedScenarios)
        {
            index++;
            var scenarios = scenarioGroup.OrderBy(x => x.StartTime).ToList();

            var scenarioText = scenarioGroup.Key.ScenarioText;

            var failed = scenarios.Count(scenario => scenario.Status == Status.Failed);
            var passed = scenarios.Count(scenario => scenario.Status == Status.Passed);
            var passRate = Math.Round(GetPassRate(scenarios), 2);

            <div class="container-fluid border border-2 rounded border-primary my-3">
                <div id="flakey-scenario-header-@index" class="pointer" onclick="toggleElementVisibility(document.getElementById('flakey-scenario-body-@index'))">
                    <div class="d-flex justify-content-center mt-4">
                        <h4>@scenarioText</h4>
                    </div>
                    <div class="d-flex justify-content-center my-3">
                        <div class="btn-group">
                            <button class="btn btn-success">Passed: @passed</button>
                            <button class="btn btn-primary">Pass Rate: @passRate%</button>
                            <button class="btn btn-danger">Failed: @failed</button>
                        </div>
                    </div>
                </div>
                
                <div id="flakey-scenario-body-@index" class="container-fluid mb-5 invisibleElement">
                    <div class="row" id="flakey-scenario-charts-@index">
                        <div class="col">
                            <h5>Statuses</h5>
                            <div>
                                <canvas id="success-trend-chart-@index" class="max-width-100"></canvas>
                            </div>
                        </div>
                        <div class="col">
                            <h5>Durations</h5>
                            <div>
                                <canvas id="duration-trend-chart-@index" class="max-width-100"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-5" id="flakey-scenario-exception-types-@index">
                        @{
                            var exceptionWrappers = scenarios.Select(x => x.Exception).Where(x => x != null).ToList();
                            var exceptionsGroupedByType = exceptionWrappers.GroupBy(x => x.TypeName);
                        }
                        <table class="table table-hover">
                            <thead>
                            <tr>
                                <th scope="col">Exception Type</th>
                                <th scope="col">Messages</th>
                                <th scope="col">Count</th>
                            </tr>
                            </thead>
                            <tbody>

                            @foreach(var exceptionGroup in exceptionsGroupedByType)
                            {
                                <tr>
                                    <td class="align-middle">
                                        @exceptionGroup.First().TypeName
                                    </td>
                                    <td class="align-middle">
                                        @foreach (var exceptionMessage in exceptionGroup.Select(x => x.Message))
                                        {
                                            <div><span>@exceptionMessage</span></div>   
                                        }
                                    </td>
                                    <td class="align-middle">
                                        @exceptionGroup.Count()
                                    </td>
                                </tr>
                            }

                            </tbody>
                        </table>
                    </div>
                </div>

                @await Html.PartialAsync("_Javascript_Flakey_Duration_Chart", new ChartViewModel { Index = index, Scenarios = scenarios, Reports = Model })
                @await Html.PartialAsync("_Javascript_Flakey_Status_Chart", new ChartViewModel { Index = index, Scenarios = scenarios, Reports = Model })
            </div>
        }
    }
</div>

@functions 
{
    private BDTestOutputModel GetOutputModel(Scenario scenario)
    {
        return Model.FirstOrDefault(bdTestOutputModel => bdTestOutputModel.Scenarios.Any(s => s.Guid == scenario.Guid));
    }

    private static double GetPassRate(IReadOnlyCollection<Scenario> scenarios)
    {
        var failed = scenarios.Count(x => x.Status == Status.Failed);
        return 100 - (((double)failed / scenarios.Count) * 100);
    }
}