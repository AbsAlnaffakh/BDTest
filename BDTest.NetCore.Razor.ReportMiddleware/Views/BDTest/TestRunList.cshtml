@using BDTest.NetCore.Razor.ReportMiddleware.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels
@using BDTest.Test
@model IEnumerable<BDTest.NetCore.Razor.ReportMiddleware.Models.TestRunSummary>
@inject BDTestReportServerOptions BDTestReportServerOptions;

@{
    ViewBag.Title = "Test Runs";
    Layout = "_Layout";
    var isAdmin = await BDTestReportServerOptions.AdminAuthorizer.IsAdminAsync(Context);
    var pager = new Pager<TestRunSummary>(Model.ToArray(), Context.GetCurrentPageNumber());
}

<script>
    function confirmDelete(testId, tag, environment, branch, date) {
        let message = 'Are you sure you want to delete this test run?\n';
        message += '\nTest ID: ' + testId;
        if (tag) {
            message += '\nTag: ' + tag;
        }
        if (environment) {
            message += '\nEnvironment: ' + environment;
        }
        if (branch) {
            message += '\nBranch: ' + branch;
        }
        message += '\nDate: ' + date;
        
        if (confirm(message)) {
            @{
                var baseUrl = Context.GetBaseUrl();
            }
            window.location.href = "@baseUrl/bdtest/report/delete/" + testId;
        }
    }

    function filterByStatus(status) {
        
        let mainDropdownButton = document.getElementById("dropdown-main-button");
        
        switch (status) {
          case '@StatusConstants.All':
            mainDropdownButton.innerHTML = 'Show All';
            mainDropdownButton.className = "btn dropdown-toggle btn-primary";
            break;
          case '@Status.Passed':
            mainDropdownButton.innerHTML = 'Show Success';
            mainDropdownButton.className = "btn dropdown-toggle btn-success";
            break;
          case '@Status.Failed':
            mainDropdownButton.innerHTML = 'Show Failures';
            mainDropdownButton.className = "btn dropdown-toggle btn-danger";
            break;
          case '@Status.Skipped':
            mainDropdownButton.innerHTML = 'Show Skipped';
            mainDropdownButton.className = "btn dropdown-toggle btn-warning";
            break;
          case '@Status.Inconclusive':
            mainDropdownButton.innerHTML = 'Show Inconclusive';
            mainDropdownButton.className = "btn dropdown-toggle btn-warning";
            break;
          case '@Status.NotImplemented':
            mainDropdownButton.innerHTML = 'Show Not Implemented';
            mainDropdownButton.className = "btn dropdown-toggle btn-warning";
            break;
        }
        
       window.selectedStatus = status;
       performFilter();
    }
</script>

@await Html.PartialAsync("_TestPageHeaderHero", new TestPageHeaderHeroViewModel
{
    Title = "Test Runs",
    Description = "View a report from the list below"
})

<section class="section">
    <div class="container">
        <nav class="level">
            <div class="level-item">
                @await Html.PartialAsync("_PaginationButtons", pager.GetPaginationInformation())
            </div>
        </nav>
        <div class="container-fluid d-flex">
            <div class="level-left mb-5 me-auto">
                @await Html.PartialAsync("_TestRunListVisibleColumnsDropdown")
            </div>
            @if (Context.GetCurrentPageNumber() == PagerQueryParameters.All)
            {
                <div class="level-right mb-5">
                    @await Html.PartialAsync("_StatusDropdown", new StatusDropdownViewModel { IncludeScript = false })
                </div>
            }
        </div>

        @if (Context.GetCurrentPageNumber() == PagerQueryParameters.All)
        {
            <div class="row g-2">
                <div class="col-md">
                    <div class="form-floating">
                        <select class="form-select" id="filter-tag" aria-label="Floating label select example">
                            <option value="all">All</option>
                            @foreach (var tag in Model.Select(x => x.Tag).Distinct())
                            {
                                <option value="@tag">@tag</option>
                            }
                        </select>
                        <label for="filter-tag">Filter by Tag</label>
                    </div>
                </div>
                <div class="col-md">
                    <div class="form-floating">
                        <select class="form-select" id="filter-environment" aria-label="Floating label select example">
                            <option value="all">All</option>
                            @foreach (var environment in Model.Select(x => x.Environment).Distinct())
                            {
                                <option value="@environment">@environment</option>
                            }
                        </select>
                        <label for="filter-environment">Filter by Environment</label>
                    </div>
                </div>
            </div>
            
            <div class="row g-2">
                <div class="col-md">
                    <div class="form-floating">
                        <select class="form-select" id="filter-machine-name" aria-label="Floating label select example">
                            <option value="all">All</option>
                            @foreach (var machineName in Model.Select(x => x.MachineName).Distinct())
                            {
                                <option value="@machineName">@machineName</option>
                            }
                        </select>
                        <label for="filter-machine-name">Filter by Machine</label>
                    </div>
                </div>
                <div class="col-md">
                    <div class="form-floating">
                        <select class="form-select" id="filter-branch" aria-label="Floating label select example">
                            <option value="all">All</option>
                            @foreach (var branch in Model.Select(x => x.BranchName).Distinct())
                            {
                                <option value="@branch">@branch</option>
                            }
                        </select>
                        <label for="filter-branch">Filter by Branch</label>
                    </div>
                </div>
            </div>
        }

        <script>
            let filterObjectsArray = [];
             
             function performFilter() {
                 
                 // Make all visible
                 for (let tableRow of document.getElementsByTagName("tr")) {
                     showElement(tableRow);   
                 }
                 
                 for (const filterObject of filterObjectsArray) {
                     let filterValue = filterObject.filterInput.value;
                     
                     if(!filterValue || filterValue === "all") {
                         continue;
                     }
                     
                     let tags = document.getElementsByName(filterObject.tableCellNamesToCheck);
                     for (const tag of tags) {                        
                        if(tag.textContent !== filterValue) {
                            hideElement(tag.parentElement);
                        }
                     }
                 }
                 
                 if(window.selectedStatus && window.selectedStatus !== "@StatusConstants.All") {
                     let rowsNotMatchingStatus = document.querySelectorAll(".test-run-row:not(." + selectedStatus + ")");
                     for (let rowNotMatchingStatus of rowsNotMatchingStatus) {
                         hideElement(rowNotMatchingStatus);
                     }
                  }
             }
        
            function filterRows(inputElementId, tableCellNamesToCheck) {
              let filterInput = document.getElementById(inputElementId);
              
              filterObjectsArray.push({filterInput: filterInput, tableCellNamesToCheck: tableCellNamesToCheck});
              
              filterInput.addEventListener('change', function() {
                  performFilter();
              });
            }
        </script>

        @if (Context.GetCurrentPageNumber() == PagerQueryParameters.All)
        {
            <script>
            onDomLoaded(function() {
                filterRows("filter-tag", "tag-field");
                filterRows("filter-environment", "environment-field");
                filterRows("filter-machine-name", "machine-name-field");
                filterRows("filter-branch", "branch-field");
            })
            </script>
        }

        <table class="table table-hover">

            <thead>
            <tr class="off-white-bg-color">
                <th class="has-text-centered tag-column">Tag</th>
                <th class="has-text-centered environment-column">Environment</th>
                <th class="has-text-centered machine-column">Machine Name</th>
                <th class="has-text-centered branch-column">Branch</th>
                <th class="has-text-centered date-column">Date and Time</th>
                <th class="has-text-centered duration-column">Duration</th>
                <th class="has-text-centered">Tests Run</th>
                <th class="has-text-centered">Status</th>
                @* View report column *@
                <th></th>
                @if (isAdmin)
                {
                    // Delete Test Run column
                    <th></th>
                }
            </tr>
            </thead>
            <tbody>

            @foreach (var record in pager.ItemsForCurrentPage)
            {
                var status = record.Status.ToString();
                if (record.Status == Status.Failed)
                {
                    status += $" ({record.Counts.Failed})";
                }
                var timeTaken = record.FinishedAtDateTime - record.StartedAtDateTime;


                <tr class="off-white-bg-color test-run-row @record.Status">
                    <td name="tag-field" class="has-text-centered align-middle tag-column">@record.Tag</td>
                    <td name="environment-field" class="has-text-centered align-middle environment-column">@record.Environment</td>
                    <td name="machine-name-field" class="has-text-centered align-middle machine-column">@record.MachineName</td>
                    <td name="branch-field" class="has-text-centered align-middle branch-column">@record.BranchName</td>
                    <td class="has-text-centered align-middle date-column">@record.StartedAtDateTime.ToStringForReport()</td>
                    <td class="align-middle duration-column" data-bs-toggle="popover" data-bs-trigger="hover focus" data-bs-placement="top" data-bs-content="@timeTaken.ToPrettyFormat()">
                        @timeTaken.ToString()
                    </td>
                    <td class="has-text-centered align-middle">
                        <span class="title is-4">@record.Counts.Total</span>
                    </td>
                    <td class="has-text-centered align-middle">
                        <div class="d-grid">
                            <button class="btn @record.Status.GetCssColourValueForStatus() tag px-5 is-medium">
                                @status
                            </button>
                        </div>
                    </td>
                    <td class="align-middle">
                        <a href="~/bdtest/report/@record.RecordId/summary">
                            <button class="btn btn-dark pointer" onclick="disableButtonAndSpin(this)">View Report</button>
                        </a>
                    </td>
                    @if (isAdmin)
                    {
                        <td class="align-middle">
                            <button class="btn btn-danger btn-sm" onclick="confirmDelete('@record.RecordId', '@record.Tag', '@record.Environment', '@record.BranchName', '@record.StartedAtDateTime')">Delete</button>
                        </td>
                    }
                </tr>
            }

            </tbody>
        </table>
        
        <nav class="level">
            <div class="level-item">
                @await Html.PartialAsync("_PaginationButtons", pager.GetPaginationInformation())
            </div>
        </nav>

    </div>
</section>
