@using System.Web
@using BDTest.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels
@using BDTest.NetCore.Razor.ReportMiddleware.Views.BDTest
@using Humanizer
@using Microsoft.AspNetCore.Http.Extensions
@model IEnumerable<BDTest.NetCore.Razor.ReportMiddleware.Models.TestRunSummary>

@functions {

    private List<string> GetGeneric(Func<TestRunSummary, string> func, string defaultValue)
    {
        var values = Model.Select(func).Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
        values.Insert(0, defaultValue);
        return values;
    }

    private List<string> GetEnvironments()
    {
        return GetGeneric(x => x.Environment, DefaultValues.ReportServer.AllEnvironments);
    }

    private List<string> GetTags()
    {
        return GetGeneric(x => x.Tag, DefaultValues.ReportServer.AllTags);
    }
    
    private List<string> GetMachineNames()
    {
        return GetGeneric(x => x.MachineName, DefaultValues.ReportServer.AllMachines);
    }
    
    private List<string> GetBranches()
    {
        return GetGeneric(x => x.BranchName, DefaultValues.ReportServer.AllBranches);
    }

    private bool TagNeedsSelecting(string tagQueryParameter)
    {
        var tagValues = GetTags();
        
        if(tagValues == null || !tagValues.Any())
        {
            return false;
        }
        
        return string.IsNullOrEmpty(tagQueryParameter) || tagQueryParameter == DefaultValues.ReportServer.AllTags;
    }
}

<link rel="stylesheet" href="~/_content/BDTest.NetCore.Razor.ReportMiddleware/css/simplepicker.css" asp-append-version="true">
<script src="~/_content/BDTest.NetCore.Razor.ReportMiddleware/js/simplepicker.js" asp-append-version="true"></script>

@{
    ViewBag.Title = "Trends";
    Layout = "_Layout";

    var testRunSummariesEnumerable = Model.AsEnumerable() ?? Enumerable.Empty<TestRunSummary>();

    var queryString = HttpUtility.ParseQueryString(new Uri(Context.Request.GetEncodedUrl()).Query);
    
    var environmentQueryParameter = queryString.Get("environment");
    var tagQueryParameter = queryString.Get("tag");
    var machineQueryParameter = queryString.Get("machine");
    var branchQueryParameter = queryString.Get("branch");
    var dateTimeangeQueryParameter = queryString.Get("datetimerange");

    var tagValues = GetTags();
    var environmentValues = GetEnvironments();
    var machineValues = GetMachineNames();
    var branchValues = GetBranches();
    
    if (!string.IsNullOrEmpty(environmentQueryParameter) && environmentQueryParameter != DefaultValues.ReportServer.AllEnvironments)
    {
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => summary.Environment == environmentQueryParameter);
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-environment-text").textContent = '@environmentQueryParameter';
            })
        </script>
    }

    if (!string.IsNullOrEmpty(tagQueryParameter) && tagQueryParameter != DefaultValues.ReportServer.AllTags)
    {
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => summary.Tag == tagQueryParameter);
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-tag-text").textContent = '@tagQueryParameter';
            })
        </script>
    }
    
    if (!string.IsNullOrEmpty(machineQueryParameter) && machineQueryParameter != DefaultValues.ReportServer.AllMachines)
    {
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => summary.MachineName == machineQueryParameter);
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-machine-text").textContent = '@machineQueryParameter';
            })
        </script>
    }
    
    if (!string.IsNullOrEmpty(branchQueryParameter) && branchQueryParameter != DefaultValues.ReportServer.AllBranches)
    {
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => summary.BranchName == branchQueryParameter);
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-branch-text").textContent = '@branchQueryParameter';
            })
        </script>
    }
    
    if (!string.IsNullOrEmpty(dateTimeangeQueryParameter) && dateTimeangeQueryParameter != DefaultValues.ReportServer.AllDateTimes && dateTimeangeQueryParameter.Contains(".."))
    {
        var dateTimeStringArray = dateTimeangeQueryParameter.Split("..");
        if (!DateTime.TryParse(dateTimeStringArray.ElementAtOrDefault(0), out var startDate)
        || !DateTime.TryParse(dateTimeStringArray.ElementAtOrDefault(1), out var endDate))
        {
            return;
        }
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => IsInDateRange(summary.StartedAtDateTime) || IsInDateRange(summary.FinishedAtDateTime));
        var buttonText = $"{startDate.ToStringForReport(false)} to {endDate.ToStringForReport(false)}";
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-datetimerange-text").textContent = '@buttonText';
            })
        </script>
        
        bool IsInDateRange(DateTime dateTime)
        {
            return dateTime >= startDate && dateTime <= endDate;
        }
    }

    var testRunSummaries = testRunSummariesEnumerable.OrderBy(x => x.StartedAtDateTime).ToList();
    
    var baseUrl = Context.GetBaseUrl();
}

<div id="startdatetimepickercontainer"></div>
<div id="enddatetimepickercontainer"></div>

@await Html.PartialAsync("_TestPageHeaderHero", new TestPageHeaderHeroViewModel
{
    Title = "Trends",
    Description = "Here are some trends from your tests"
})

<section class="section">
    <div class="container-fluid">
        
        <nav class="nav mb-5">
            <div class="container-fluid d-flex justify-content-center">
                @if (tagValues != null && tagValues.Any())
                {
                    @await Html.PartialAsync("_TrendsPageGenericDropdown", new TrendsPageGenericDropdownViewModel
                    {
                        ButtonId = "filter-by-tag-text",
                        ButtonText = "Filter by Tag",
                        QueryParameterName = "tag",
                        DropdownValues = tagValues
                    })
                }

                @if (environmentValues != null && environmentValues.Any())
                {
                    @await Html.PartialAsync("_TrendsPageGenericDropdown", new TrendsPageGenericDropdownViewModel
                    {
                        ButtonId = "filter-by-environment-text",
                        ButtonText = "Filter by Environment",
                        QueryParameterName = "environment",
                        DropdownValues = environmentValues
                    })
                }

                @if (machineValues != null && machineValues.Any())
                {
                    @await Html.PartialAsync("_TrendsPageGenericDropdown", new TrendsPageGenericDropdownViewModel
                    {
                        ButtonId = "filter-by-machine-text",
                        ButtonText = "Filter by Machine",
                        QueryParameterName = "machine",
                        DropdownValues = machineValues
                    })
                }

                @if (branchValues != null && branchValues.Any())
                {
                    @await Html.PartialAsync("_TrendsPageGenericDropdown", new TrendsPageGenericDropdownViewModel
                    {
                        ButtonId = "filter-by-branch-text",
                        ButtonText = "Filter by Branch",
                        QueryParameterName = "branch",
                        DropdownValues = branchValues
                    })
                }

                <li class="nav-item">
                    <a class="bg-primary text-white nav-link" href="#" aria-haspopup="true" id="dateRangePicker">
                        Filter by Date + Time
                    </a>
                </li>
            </div>
        </nav>

        @if (!TagNeedsSelecting(tagQueryParameter))
        {
            <div class="container-fluid">
                <div class="row">
                    <div class="col">
                        <h5 class="subtitle is-5">Durations</h5>
                        <canvas id="duration-trend-chart"></canvas>
                    </div>
                    <div class="col">
                        <h5 class="subtitle is-5">Statuses</h5>
                        <canvas id="success-trend-chart"></canvas>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center">
                <span>Please select a tag to continue.</span>
            </div>
        }
    </div>
</section>

@if (!TagNeedsSelecting(tagQueryParameter))
{
@* Report IDs available for Javascript *@
    <script>

let reportIdsArray = [];

@foreach (var report in testRunSummaries)
{
    @:reportIdsArray.push("@report.RecordId");
}

function chartOnClick(chart, event) {
   let activePoint = chart.getElementAtEvent(event);
      
   if (activePoint.length > 0) {
      let clickedDatasetIndex = activePoint[0]._datasetIndex;
      let clickedElementindex = activePoint[0]._index;
      
      let clickedOnReportId = reportIdsArray[clickedElementindex];

      window.location.href = '@baseUrl/bdtest/report/' + clickedOnReportId + '/summary'
   }
}
</script>

@* Duration Trend Chart *@
    <script>
var durationChartContext = document.getElementById('duration-trend-chart').getContext('2d');
data = {
    datasets: [{
        backgroundColor: "#3298dc",
        borderColor: "#3298dc",
        data: [
            @foreach (var timespan in testRunSummaries.Select(model => model.FinishedAtDateTime - model.StartedAtDateTime))
            {
                @((long)timespan.TotalSeconds)@:,
            }
            ]
    }],

    labels: [
        @foreach (var testRunSummary in testRunSummaries)
        {
            @:"@testRunSummary.StartedAtDateTime.ToStringForReport(false)",
        }
    ]
}

let durationChart = new Chart(durationChartContext, {
    type: 'line',
    data: data,
    options: {
        legend: {
                    display: false
                },
        scales: {
            yAxes: [{
              scaleLabel: {
                labelString: 'Seconds'
              },
              ticks: {
                  beginAtZero:true,
                  // Include a dollar sign in the ticks
                  callback: function(value, index, values) {
                      return value + "s";
                  }
                  }
            }]
          },
        tooltips: {
            callbacks: {
                label: function(tooltipItem, data) {
                  return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] + " seconds";
                }
            }
        }
    }
});

document.getElementById('duration-trend-chart').onclick = function(evt) {
    chartOnClick(durationChart, evt);
}
</script>


@* Success Trend Chart *@
    <script>
              
var successChartContext = document.getElementById('success-trend-chart').getContext('2d');
data = {
    datasets: [ 
        {
            label: "Not Run",
            borderColor: "rgba(0,0,0,0)",
            pointRadius: 0,
            pointHitRadius: 15,
            borderWidth: 0,
            data: [
                @string.Join(",", testRunSummaries.Select(summary => summary.Counts.NotRun))
            ]    
        },
        {
            label: "Failed",
            backgroundColor: "#f14668",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#f14668",
            pointBackgroundColor: "#f14668",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", testRunSummaries.Select(summary => summary.Counts.Failed))
            ]    
        },
        {
            label: "Inconclusive",
            backgroundColor: "#ffdd57",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#ffdd57",
            pointBackgroundColor: "#ffdd57",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", testRunSummaries.Select(summary => summary.Counts.Inconclusive))
            ]    
        },
        {
            label: "Not Implemented",
            backgroundColor: "#ffdd57",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#ffdd57",
            pointBackgroundColor: "#ffdd57",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", testRunSummaries.Select(summary => summary.Counts.NotImplemented))
            ]    
        },
        {
            label: "Skipped",
            backgroundColor: "#ffdd57",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#ffdd57",
            pointBackgroundColor: "#ffdd57",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", testRunSummaries.Select(summary => summary.Counts.Skipped))
            ]    
        },
        {
            label: "Passed",
            backgroundColor: "#48c774",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#48c774",
            pointBackgroundColor: "#48c774",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", testRunSummaries.Select(summary => summary.Counts.Passed))
            ]    
        }
        ],

    labels: [
        @foreach (var testRunSummary in testRunSummaries)
        {
            @:"@testRunSummary.StartedAtDateTime.ToStringForReport(false)",
        }
    ]
}

var successChart = new Chart(successChartContext, {
    type: 'line',
    data: data,
    options: {
        legend: {
                    display: false
                },
        scales: {
            yAxes: [{
              scaleLabel: {
                labelString: 'Seconds'
              },
              stacked: true,
              ticks: {
                  beginAtZero:true,
                  // Include a dollar sign in the ticks
                  callback: function(value, index, values) {
                      return "";
                  }
                  }
            }]
          }
    }
});

document.getElementById('success-trend-chart').onclick = function(evt) {
    chartOnClick(successChart, evt);
}
</script>
}