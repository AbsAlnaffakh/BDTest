@using System.Web
@using BDTest.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels
@using BDTest.NetCore.Razor.ReportMiddleware.Views.BDTest
@using BDTest.Test
@using Microsoft.AspNetCore.Http.Extensions
@model IEnumerable<BDTest.NetCore.Razor.ReportMiddleware.Models.TestRunSummary>
@inject BDTestReportServerOptions BDTestReportServerOptions;

@functions {

    private List<string> GetGeneric(Func<TestRunSummary, string> func, string defaultValue)
    {
        var values = Model.Select(func).Where(x => !string.IsNullOrEmpty(x)).Distinct().ToList();
        values.Insert(0, defaultValue);
        return values;
    }

    private List<string> GetEnvironments()
    {
        return GetGeneric(x => x.Environment, DefaultValues.ReportServer.AllEnvironments);
    }

    private List<string> GetTags()
    {
        return GetGeneric(x => x.Tag, DefaultValues.ReportServer.AllTags);
    }
    
    private List<string> GetMachineNames()
    {
        return GetGeneric(x => x.MachineName, DefaultValues.ReportServer.AllMachines);
    }
    
    private List<string> GetBranches()
    {
        return GetGeneric(x => x.BranchName, DefaultValues.ReportServer.AllBranches);
    }

    private bool TagNeedsSelecting(string tagQueryParameter)
    {
        var tagValues = GetTags();
        
        if(tagValues == null || !tagValues.Any())
        {
            return false;
        }
        
        return string.IsNullOrEmpty(tagQueryParameter) || tagQueryParameter == DefaultValues.ReportServer.AllTags;
    }
}

@{
    ViewBag.Title = "Select Tests to Compare";
    Layout = "_Layout";
    
    var testRunSummariesEnumerable = Model.AsEnumerable() ?? Enumerable.Empty<TestRunSummary>();

    var queryString = HttpUtility.ParseQueryString(new Uri(Context.Request.GetEncodedUrl()).Query);
    
    var environmentQueryParameter = queryString.Get("environment");
    var tagQueryParameter = queryString.Get("tag");
    var machineQueryParameter = queryString.Get("machine");
    var branchQueryParameter = queryString.Get("branch");
    var dateTimeangeQueryParameter = queryString.Get("datetimerange");

    var tagValues = GetTags();
    var environmentValues = GetEnvironments();
    var machineValues = GetMachineNames();
    var branchValues = GetBranches();
    
    if (!string.IsNullOrEmpty(environmentQueryParameter) && environmentQueryParameter != DefaultValues.ReportServer.AllEnvironments)
    {
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => summary.Environment == environmentQueryParameter);
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-environment-text").textContent = '@environmentQueryParameter';
            })
        </script>
    }

    if (!string.IsNullOrEmpty(tagQueryParameter) && tagQueryParameter != DefaultValues.ReportServer.AllTags)
    {
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => summary.Tag == tagQueryParameter);
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-tag-text").textContent = '@tagQueryParameter';
            })
        </script>
    }
    
    if (!string.IsNullOrEmpty(machineQueryParameter) && machineQueryParameter != DefaultValues.ReportServer.AllMachines)
    {
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => summary.MachineName == machineQueryParameter);
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-machine-text").textContent = '@machineQueryParameter';
            })
        </script>
    }
    
    if (!string.IsNullOrEmpty(branchQueryParameter) && branchQueryParameter != DefaultValues.ReportServer.AllBranches)
    {
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => summary.BranchName == branchQueryParameter);
        <script>
            onDomLoaded(function() {
              document.getElementById("filter-by-branch-text").textContent = '@branchQueryParameter';
            })
        </script>
    }

    if (!string.IsNullOrEmpty(dateTimeangeQueryParameter) && dateTimeangeQueryParameter != DefaultValues.ReportServer.AllDateTimes && dateTimeangeQueryParameter.Contains(".."))
    {
        var dateTimeStringArray = dateTimeangeQueryParameter.Split("..");
        if (!DateTime.TryParse(dateTimeStringArray.ElementAtOrDefault(0), out var startDate)
            || !DateTime.TryParse(dateTimeStringArray.ElementAtOrDefault(1), out var endDate))
        {
            return;
        }
        testRunSummariesEnumerable = testRunSummariesEnumerable.Where(summary => IsInDateRange(summary.StartedAtDateTime) || IsInDateRange(summary.FinishedAtDateTime));
        var buttonText = $"{startDate.ToShortDateString()} to {endDate.ToShortDateString()}";
        <script>
            onDomLoaded(function() {
              document.getElementById("date-time-input-button").textContent = '@buttonText';
            })
        </script>
        
        bool IsInDateRange(DateTime dateTime)
        {
            return dateTime >= startDate && dateTime <= endDate;
        }
    }

    var testRunSummaries = testRunSummariesEnumerable.OrderBy(x => x.StartedAtDateTime).ToList();
    
    var baseUrl = Context.GetBaseUrl();
}

<script>
function getCheckedIds() {
        let checkboxes = document.getElementsByName("checkbox");
                  let checkedIds = [];
                  
                  for (let i=0; i<checkboxes.length; i++) {
                       // And stick the checked ones onto an array...
                       if (checkboxes[i].checked) {
                          checkedIds.push(checkboxes[i].id);
                       }
                    }
                  
                  return checkedIds;
    }
</script>

<div id="startdatetimepickercontainer"></div>
<div id="enddatetimepickercontainer"></div>

@await Html.PartialAsync("_TestPageHeaderHero", new TestPageHeaderHeroViewModel
{
    Title = "Flakey Tests",
    Description = "Select the test runs that you'd like to compare"
})

<section class="section">
    <div class="container">
        
        <nav class="nav mb-5">
            <div class="container-fluid d-flex justify-content-center">
                @if (tagValues != null && tagValues.Any())
                {
                    @await Html.PartialAsync("_TrendsPageGenericDropdown", new TrendsPageGenericDropdownViewModel
                    {
                        ButtonId = "filter-by-tag-text",
                        ButtonText = "Filter by Tag",
                        QueryParameterName = "tag",
                        DropdownValues = tagValues
                    })
                }

                @if (environmentValues != null && environmentValues.Any())
                {
                    @await Html.PartialAsync("_TrendsPageGenericDropdown", new TrendsPageGenericDropdownViewModel
                    {
                        ButtonId = "filter-by-environment-text",
                        ButtonText = "Filter by Environment",
                        QueryParameterName = "environment",
                        DropdownValues = environmentValues
                    })
                }

                @if (machineValues != null && machineValues.Any())
                {
                    @await Html.PartialAsync("_TrendsPageGenericDropdown", new TrendsPageGenericDropdownViewModel
                    {
                        ButtonId = "filter-by-machine-text",
                        ButtonText = "Filter by Machine",
                        QueryParameterName = "machine",
                        DropdownValues = machineValues
                    })
                }

                @if (branchValues != null && branchValues.Any())
                {
                    @await Html.PartialAsync("_TrendsPageGenericDropdown", new TrendsPageGenericDropdownViewModel
                    {
                        ButtonId = "filter-by-branch-text",
                        ButtonText = "Filter by Branch",
                        QueryParameterName = "branch",
                        DropdownValues = branchValues
                    })
                }

                <li class="nav-item">
                    <input id="date-time-input-end" type="hidden"/>
                    <a class="bg-primary text-white nav-link" href="#" aria-haspopup="true" id="date-time-input-button">
                        Filter by Date + Time
                    </a>
                    <script>
                        let datePicker = getDatePicker();
                        document.getElementById("date-time-input-button").addEventListener("click", function () {
                            datePicker.show();
                        });
                    </script>
                </li>
            </div>
        </nav>

        @if (!TagNeedsSelecting(tagQueryParameter))
        {
            <div class="d-flex justify-content-center my-5">
                <button id="compare-flakiness" class="btn btn-primary">
                    Check Flakey Tests
                </button>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center">
                <span>Please select a tag to continue.</span>
            </div>
        }
        
        <script>
            let checkFlakeyTestsButton = document.getElementById("compare-flakiness");
            checkFlakeyTestsButton.addEventListener('click', function() {
                let checkedIds = getCheckedIds();
                if (checkedIds.length < 2) {
                    alert("Select 2 or more runs to check flakey tests!");   
                    return
                }
                disableButtonAndSpin(checkFlakeyTestsButton);
                post("test-run-flakiness", { ReportIds: checkedIds });
            });
        </script>

        @if (!TagNeedsSelecting(tagQueryParameter))
        {
            <table class="table is-fullwidth">

                <thead>
                <tr class="off-white-bg-color">
                    <th class="has-text-centered">
                        <input id="checkbox-header" type="checkbox"/>
                    </th>
                    <th class="has-text-centered tag-column">Tag</th>
                    <th class="has-text-centered environment-column">Environment</th>
                    <th class="has-text-centered machine-column">Machine Name</th>
                    <th class="has-text-centered branch-column">Branch</th>
                    <th class="has-text-centered date-column">Date and Time</th>
                    <th class="has-text-centered duration-column">Duration</th>
                    <th class="has-text-centered">Tests Run</th>
                    <th class="has-text-centered">Status</th>
                </tr>
                </thead>
                <tbody>

                @foreach (var record in testRunSummariesEnumerable)
                {
                    var status = record.Status.ToString();
                    if (record.Status == Status.Failed)
                    {
                        status += $" ({record.Counts.Failed})";
                    }
                    
                    <tr class="off-white-bg-color test-run-row @record.Status">
                        <td class="has-text-centered align-middle">
                            <input name="checkbox" type="checkbox" class="checkbox-child" id="@record.RecordId"/>
                        </td>
                        <td name="tag-field" class="has-text-centered align-middle tag-column">@record.Tag</td>
                        <td name="environment-field" class="has-text-centered align-middle environment-column">@record.Environment</td>
                        <td name="machine-name-field" class="has-text-centered align-middle machine-column">@record.MachineName</td>
                        <td name="branch-field" class="has-text-centered align-middle branch-column">@record.BranchName</td>
                        <td class="has-text-centered align-middle date-column">@record.StartedAtDateTime.ToStringForReport()</td>
                        <td class="has-text-centered align-middle duration-column">
                            <div class="tooltip">
                                @{
                                    var timeTaken = record.FinishedAtDateTime - record.StartedAtDateTime;
                                }
                                @timeTaken.ToString()
                                <span class="tooltiptext">@timeTaken.ToPrettyFormat()</span>
                            </div>
                        </td>
                        <td class="has-text-centered align-middle">
                            <span class="title is-4">@record.Counts.Total</span>
                        </td>
                        <td class="has-text-centered align-middle">
                            <div class="d-grid">
                                <button class="btn @record.Status.GetCssColourValueForStatus() tag px-5 is-medium">
                                    @status
                                </button>
                            </div>
                        </td>
                    </tr>
                }

                </tbody>
            </table>
        }
    </div>
</section>
