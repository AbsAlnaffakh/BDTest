@using BDTest.NetCore.Razor.ReportMiddleware.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels
@using BDTest.Test
@model IGrouping<string, Scenario>[]

@{
    ViewBag.Title = "Stories";
    Layout = "_Layout";
}

@{
    var pager = new Pager<IGrouping<string, Scenario>>(Model, Context.GetCurrentPageNumber(), pageSize:5);
}

@await Html.PartialAsync("_TestPageHeaderHero", new TestPageHeaderHeroViewModel
{
    Title = "Stories",
    Description = "Here are the stories that you've tested"
})

@{ var storyIndex = 0; }

<div class="container mt-6">
    <nav class="level">
        <div class="level-item">
            @await Html.PartialAsync("_PaginationButtons", pager.GetPaginationInformation())
        </div>
    </nav>
</div>

<div id="stories-container">
    
    <div class="btn-group mb-1" role="group" >
        @await Html.PartialAsync("_StatusDropdown", new StatusDropdownViewModel { IncludeScript = true })
        <button class="btn" onclick="expandCollapseStories(true);">Expand All</button>
        <button class="btn" onclick="expandCollapseStories(false);">Collapse All</button>
    </div>
    
    <script>
          function expandStory(storyHeader, elementToHide){
                  storyHeader.parentElement.parentElement.classList.remove("rounded-all-corners")
                  storyHeader.parentElement.parentElement.classList.add("rounded-top-corners")
                  setElementVisible(elementToHide);
          }
          
          function collapseStory(storyHeader, elementToHide){
              storyHeader.parentElement.parentElement.classList.remove("rounded-top-corners")
              storyHeader.parentElement.parentElement.classList.add("rounded-all-corners")
              setElementInvisible(elementToHide);
          }
          
          function toggleStoryHeader(storyHeaderId, shouldExpand) {
            let storyHeader = document.getElementById(storyHeaderId);
            let elementIdToHide = storyHeader.getAttribute("element-id-to-hide");
            let elementToHide = document.getElementById(elementIdToHide);
            
            let expand = shouldExpand;
            if(shouldExpand == null) 
            {
                expand = elementToHide.classList.contains("invisible");
            }
                                  
              if(expand) {
                  expandStory(storyHeader, elementToHide);
              } else {
                  collapseStory(storyHeader, elementToHide);
              }
          }
    
    function expandCollapseStories(shouldExpand) {
      let storyHeaders = document.getElementsByClassName("story-header");
      for (let storyHeader of storyHeaders) {
          toggleStoryHeader(storyHeader.id, shouldExpand);
      }
    }
    </script>
    
    @foreach (var story in pager.ItemsForCurrentPage)
    {
        storyIndex++;
        var scenariosForThisStory = story.ToList();
        var scenariosGroupedByScenarioText = scenariosForThisStory.GroupBy(scenario => scenario.GetScenarioText()).ToList();

        var hasSuccess = scenariosForThisStory.Any(scenario => scenario.Status == Status.Passed) ? HtmlClassConstants.HasSuccess : string.Empty;
        var hasFailures = scenariosForThisStory.Any(scenario => scenario.Status == Status.Failed) ? HtmlClassConstants.HasFailures : string.Empty;
        var hasSkipped = scenariosForThisStory.Any(scenario => scenario.Status == Status.Skipped) ? HtmlClassConstants.HasSkipped : string.Empty;
        var hasInconclusive = scenariosForThisStory.Any(scenario => scenario.Status == Status.Inconclusive) ? HtmlClassConstants.HasInconclusive : string.Empty;
        var hasNotImplemented = scenariosForThisStory.Any(scenario => scenario.Status == Status.NotImplemented) ? HtmlClassConstants.HasNotImplemented : string.Empty;

        <div class="container-xlg border border-2 rounded border-primary">
            <div class="px-4 my-5 text-center">
                @{ var storyTextSplitByLines = story.Key.SplitOnNewLines(); }
                @foreach (var line in storyTextSplitByLines)
                {
                    <h1 class="display-6 fs-3 text fw-bold">@line</h1>
                }
                <div class="col-lg-6 mx-auto">
                    <button class="btn btn-lg @story.GetTotalStatus().GetCssColourValueForStatus() lead mb-4">@story.GetTotalStatus()</button>
                </div>
            </div>

            <div class="box mb-0 rounded-bottom-corners" id="story-@storyIndex">
                <div class="has-text-right scenarios-buttons-row btn-group" role="group">
                    @if (scenariosGroupedByScenarioText.Any(scenarios => scenarios.Count() > 1))
                    {
                        @await Html.PartialAsync("_CollapseExpandGroupedScenariosButtons", $"story-{storyIndex}")
                    }
                    <button class="btn toggle-hide pointer" toggle-alternative-text="Hide Summary" onclick="toggleElementVisibility(document.getElementById('story-summary-@storyIndex'))">Show Summary</button>
                    <button class="btn toggle-hide pointer" toggle-alternative-text="Hide Timings Chart" onclick="toggleElementVisibility(document.getElementById('story-summary-pie-chart-times-@storyIndex'))">Show Timings Chart</button>
                </div>

                <div class="mt-4 container invisibleElement" id="story-summary-@storyIndex">
                    @await Html.PartialAsync("_SummaryGraphics", new SummaryViewModel { Scenarios = scenariosForThisStory })
                </div>

                <div class="mt-4 mb-6 container invisibleElement story-chart-container" id="story-summary-pie-chart-times-@storyIndex">
                    @await Html.PartialAsync("_TestTimesPieChart", new TestTimesPieChartViewModel { Scenarios = scenariosForThisStory, StoryIndex = storyIndex })
                </div>

                <div class="scrollable-table-container">
                    <table class="table is-fullwidth mt-4">
                        <thead>
                        <tr>
                            @* Expand Toggle *@
                            <th scope="col"></th>
                            <th class="has-text-centered">Scenario</th>
                            <th class="has-text-centered">Status</th>
                            <th class="has-text-centered">Duration</th>
                            <th class="has-text-centered">Start</th>
                            <th class="has-text-centered">End</th>
                        </tr>
                        </thead>
                        <tbody>

                        @{ var scenarioIndex = new ReferenceInt(0); }
                        @{ var groupedScenariosCount = new ReferenceInt(0); }
                        @foreach (var groupedScenarios in scenariosGroupedByScenarioText)
                        {
                            @await Html.PartialAsync("_GroupedScenarioTableRow", new GroupedScenarioViewModel
                            {
                                Scenarios = groupedScenarios.ToList(),
                                ScenarioIndex = scenarioIndex,
                                GroupedScenarioIndex = groupedScenariosCount,
                            })
                        }

                        </tbody>
                    </table>
                </div>
            </div>


            @{
                var allScenarioGroups = scenariosGroupedByScenarioText.Select(groupedScenarios => groupedScenarios.ToList()).ToList();
            }

            @* @for (var outerIndex = 0; outerIndex < allScenarioGroups.Count; outerIndex++) *@
            @* { *@
            @*     var groupedScenario = allScenarioGroups[outerIndex]; *@
            @*     for (var innerIndex = 0; innerIndex < groupedScenario.Count; innerIndex++) *@
            @*     { *@
            @*         var lastScenario = groupedScenario.ElementAtOrDefault(innerIndex - 1) ?? allScenarioGroups.ElementAtOrDefault(outerIndex - 1)?.LastOrDefault(); *@
            @*         var scenario = groupedScenario[innerIndex]; *@
            @*         var nextScenario = groupedScenario.ElementAtOrDefault(innerIndex + 1) ?? allScenarioGroups.ElementAtOrDefault(outerIndex + 1)?.FirstOrDefault(); *@
            @* *@
            @*         @await Html.PartialAsync("_ScenarioModalPopup", new ScenarioModalViewModel *@
            @*         { *@
            @*             LastScenario = lastScenario, *@
            @*             Scenario = scenario, *@
            @*             NextScenario = nextScenario *@
            @*         }) *@
            @*     } *@
            @* } *@
                    
        </div>

        <hr class="rounded quarter-width center-horizontally">
    }
    
    @* Remove the last divider - There's not another story after it so it's not dividing anything! *@
    <script>
        Array.prototype.slice.call(document.getElementsByTagName("hr")).slice(-1)[0].remove()
    </script>
    
    @if (pager.TotalItems == 0)
    {
        @(await Html.PartialAsync("_WowSuchEmpty"))
    }

</div>

<div class="container mb-6">
    <nav class="level">
        <div class="level-item">
            @await Html.PartialAsync("_PaginationButtons", pager.GetPaginationInformation())
        </div>
    </nav>
</div>