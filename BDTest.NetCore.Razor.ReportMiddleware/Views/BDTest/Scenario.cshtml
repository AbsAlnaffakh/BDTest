@using BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels
@using BDTest.Test
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@model Scenario

@{
    ViewBag.Title = Model.GetScenarioText();
    Layout = "_Layout";
}

<button class="btn btn-primary ms-2 mt-2" onclick="window.history.back()">Back</button>

@await Html.PartialAsync("_TestPageHeaderHero", new TestPageHeaderHeroViewModel
{
    Title = "Scenario",
    Description = Model.GetScenarioText()
})

<div class="container-fluid">
    <div class="box" id="all-scenarios-container">
        <div class="btn-group" role="group" >
            @await Html.PartialAsync("_CollapseExpandGroupedScenariosButtons", "all-scenarios-container")
        </div>

        <div class="scrollable-table-container">
            <table class="table table-hover">
                <thead>
                <tr>
                    @* Expand Toggle *@
                    <th scope="col"></th>
                    <th scope="col">Step</th>
                    <th scope="col">Status</th>
                    <th scope="col">Duration</th>
                    <th scope="col">Start</th>
                    <th scope="col">End</th>
                </tr>
                </thead>
                <tbody>
                
                @if (!string.IsNullOrEmpty(Model.TestStartupInformation))
                {
                    <tr step-id="step-startup" data-bs-toggle="collapse" data-bs-target="#step-startup-expanded" class="accordion-toggle pointer" onclick="document.getElementById('step-startup-toggle-container').classList.toggle('dropend')">
                        <td class="align-middle">
                            <div class="d-grid dropend" id="step-startup-toggle-container">
                                <button class="btn dropdown-toggle"></button>
                            </div>
                        </td>
                        <td class="align-middle">
                            Test Startup Information
                        </td>
                    </tr>
                    <tr>
                        <td colspan="6" class="hiddenRow">
                            <div class="accordion-body collapse" id="step-startup-expanded">
                                <div class="container" style="overflow-x: auto;">
                                    <h5>Startup Info:</h5>
                                    <pre class="py-4">@Model.TestStartupInformation</pre>
                                </div>
                            </div>
                        </td>
                    </tr>
                }


                @for (var index = 0; index < Model.Steps.Count; index++)
                {
                    var step = Model.Steps[index];
                    <tr step-id="step-@step.Guid" data-bs-toggle="collapse" data-bs-target="#step-@step.Guid-expanded" class="accordion-toggle @(IsExpandable(step) ? "pointer": "")" onclick="document.getElementById('step-@step.Guid-toggle-container').classList.toggle('dropend')">
                        <td class="align-middle">
                            @if (IsExpandable(step))
                            {
                                <div class="d-grid dropend" id="step-@step.Guid-toggle-container">
                                    <button class="btn dropdown-toggle"></button>
                                </div>
                            }
                        </td>
                        <td class="align-middle">
                            @step.StepText
                        </td>
                        <td class="align-middle">
                            <div class="d-grid">
                                <button type="button" class="btn @step.Status.GetCssColourValueForStatus()">@step.Status.AsString()</button>
                            </div>
                        </td>
                        <td class="align-middle" data-bs-toggle="popover" data-bs-trigger="hover focus" data-bs-placement="top" data-bs-content="@step.TimeTaken.ToPrettyFormat()">
                            @step.TimeTaken.ToString()
                        </td>
                        <td class="align-middle">@step.StartTime.ToStringForReport()</td>
                        <td class="align-middle">@step.EndTime.ToStringForReport()</td>
                    </tr>
                    if (IsExpandable(step))
                    {
                        <tr>
                            <td colspan="6" class="hiddenRow">
                                <div class="accordion-body collapse" id="step-@step.Guid-expanded">
                                    @if (!string.IsNullOrEmpty(step.Output))
                                    {
                                        <div class="container" style="overflow-x: auto;">
                                            <h5>Step Output:</h5>
                                            <pre class="py-4">@step.Output</pre>
                                        </div>
                                    }
                                    @if (step.Exception != null)
                                    {
                                        <div class="container" style="overflow-x: auto;">
                                            <h5>Step Exception:</h5>
                                            <pre class="text-danger py-4">@step.Exception.AsString</pre>
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }

                @if (!string.IsNullOrEmpty(Model.TearDownOutput))
                {
                    // TODO
                }

                </tbody>
            </table>
        </div>
    </div>

</div>

@functions 
{
    private bool IsExpandable(Step step)
    {
        return !string.IsNullOrEmpty(step.Output) || step.Exception != null;
    }
}