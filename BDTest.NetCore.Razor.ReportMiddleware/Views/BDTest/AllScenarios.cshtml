@using System.Web
@using BDTest
@using BDTest.NetCore.Razor.ReportMiddleware.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels
@using BDTest.Test
@using Microsoft.AspNetCore.Http.Extensions
@model BDTest.Maps.BDTestOutputModel

@functions {
    private static IOrderedEnumerable<IGrouping<string, Scenario>> SetOrder(string orderByQueryParameter,
        IOrderedEnumerable<IGrouping<string, Scenario>> scenariosGroupedByScenarioTextEnumerable)
    {
        switch (orderByQueryParameter)
        {
            case OrderConstants.Name:
                scenariosGroupedByScenarioTextEnumerable =
                    scenariosGroupedByScenarioTextEnumerable.OrderBy(scenarios => scenarios.Key);
                break;
            case OrderConstants.Duration:
                scenariosGroupedByScenarioTextEnumerable =
                    scenariosGroupedByScenarioTextEnumerable.OrderByDescending(scenarios =>
                        scenarios.Select(scenario => scenario.TimeTaken).Max());
                break;
            case OrderConstants.Status:
                // Defaults to status. We don't need to do anything :)
                break;
            case OrderConstants.DateAscending:
                scenariosGroupedByScenarioTextEnumerable = scenariosGroupedByScenarioTextEnumerable.OrderBy(scenarios =>
                    BDTestUtil.GetTestTimer(scenarios.ToList()).TestsStartedAt);
                break;
            case OrderConstants.DateDescending:
                scenariosGroupedByScenarioTextEnumerable =
                    scenariosGroupedByScenarioTextEnumerable.OrderByDescending(scenarios =>
                        BDTestUtil.GetTestTimer(scenarios.ToList()).TestsStartedAt);
                break;
        }

        return scenariosGroupedByScenarioTextEnumerable;
    }
}

@{
    ViewBag.Title = "Stories";
    Layout = "_Layout";
    
    var filterByQueryParameter = HttpUtility.ParseQueryString(new Uri(Context.Request.GetEncodedUrl()).Query).Get("filterByStatus");
    var orderByQueryParameter = HttpUtility.ParseQueryString(new Uri(Context.Request.GetEncodedUrl()).Query).Get("order");

    var scenariosGroupedByScenarioTextEnumerable = Model.Scenarios.GroupBy(scenario => scenario.GetScenarioText())
        .OrderBy(group => group.GetTotalStatus().GetOrder())
        .ThenBy(group => group.Key);

    if (orderByQueryParameter != null)
    {
        scenariosGroupedByScenarioTextEnumerable = SetOrder(orderByQueryParameter, scenariosGroupedByScenarioTextEnumerable);
    }
    
    var scenariosGroupedByScenarioText = scenariosGroupedByScenarioTextEnumerable.ToList();
}

@if (filterByQueryParameter != null)
{
    <script>
        onDomLoaded(function() {
          filterByStatus('@filterByQueryParameter');
        });
    </script>
}

<section class="hero is-info">
    <div class="hero-body">
        <div class="container">
            <div class="columns is-vcentered">
                <div class="column">
                    <h1 class="title">
                        All Scenarios
                    </h1>
                    <h2 class="subtitle">
                        Here are all of the scenarios in this test run:
                    </h2>
                </div>
                <div class="column">
                    @await Html.PartialAsync("_PreviousNextReportButtons", Model)
                </div>
            </div>
        </div>
    </div>
</section>

<section class="section">
    <div class="container">
    <div class="box" id="all-scenarios-container">
        <div class="buttons is-right">
            @await Html.PartialAsync("_StatusDropdown")
            @await Html.PartialAsync("_OrderByDropdown")
            <div class="scenarios-buttons-row">
                @await Html.PartialAsync("_CollapseExpandGroupedScenariosButtons", "all-scenarios-container")
                @* <button class="button toggle-hide pointer" toggle-alternative-text="Hide Summary" element-id-to-hide="summary">Show Summary</button> *@
            </div>
        </div>

        <div class="mt-4 container invisible" id="summary">
            @await Html.PartialAsync("_SummaryGraphics", new SummaryViewModel {Scenarios = Model.Scenarios})
        </div>

        <table class="table is-fullwidth">
            <thead>
            <tr>
                <th class="has-text-centered">Scenario</th>
                <th class="has-text-centered">Status</th>
                <th class="has-text-centered">Duration</th>
                <th class="has-text-centered">Start</th>
                <th class="has-text-centered">End</th>
            </tr>
            </thead>
            <tbody>

            @{ var scenarioIndex = new ReferenceInt(0); }
            @{ var groupedScenariosCount = new ReferenceInt(0); }
            @foreach (var groupedScenarios in scenariosGroupedByScenarioText)
            {
                @await Html.PartialAsync("_GroupedScenarioTableRow", new GroupedScenarioViewModel
                {
                    Scenarios = groupedScenarios.ToList(),
                    ScenarioIndex = scenarioIndex,
                    GroupedScenarioIndex = groupedScenariosCount,
                })
            }

            </tbody>
        </table>
        
        @await Html.PartialAsync("_WowSuchEmpty")
    </div>


        @{
            var allScenarios = scenariosGroupedByScenarioText.SelectMany(groupedScenarios => groupedScenarios).ToList();
        }
        @for (var index = 0; index < allScenarios.Count; index++)
        {
            var lastScenario = allScenarios.ElementAtOrDefault(index - 1);
            var scenario = allScenarios[index];
            var nextScenario = allScenarios.ElementAtOrDefault(index + 1);
            
            @await Html.PartialAsync("_ScenarioModalPopup", new ScenarioModalViewModel
            {
                LastScenario = lastScenario,
                Scenario = scenario,
                NextScenario = nextScenario
            })
        }

    </div>
</section>
