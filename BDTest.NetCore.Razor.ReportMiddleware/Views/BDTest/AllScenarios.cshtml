@using System.Web
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels
@using BDTest.Test
@using Microsoft.AspNetCore.Http.Extensions
@model IGrouping<string, Scenario>[]

@{
    ViewBag.Title = "Stories";
    Layout = "_Layout";
    
    var filterByQueryParameter = HttpUtility.ParseQueryString(new Uri(Context.Request.GetEncodedUrl()).Query).Get("filterByStatus");

    var currentPageString = Context.GetCurrentPageNumber();

    if (filterByQueryParameter != null)
    {
        <script>
            onDomLoaded(function() {
              filterByStatus('@filterByQueryParameter');
            });
        </script>
    }
    
    var pager = new Pager<IGrouping<string, Scenario>>(Model, currentPageString);
}

<section class="hero is-info">
    <div class="hero-body">
        <div class="container">
            <div class="columns is-vcentered">
                <div class="column">
                    <h1 class="title">
                        Scenarios
                    </h1>
                    <h2 class="subtitle">
                        Here are the scenarios in this test run:
                    </h2>
                </div>
                <div class="column">
                    @await Html.PartialAsync("_PreviousNextReportButtons", ViewBag.Id as string)
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container mt-6">
    <nav class="level">
        <div class="level-item">
            @await Html.PartialAsync("_PaginationButtons", pager.GetPaginationInformation())
        </div>
    </nav>
</div>

<section class="section">
    <div class="container max-width-80">
    <div class="box" id="all-scenarios-container">
        <div class="buttons is-right">
            @await Html.PartialAsync("_StatusDropdown", new StatusDropdownViewModel { IncludeScript = true })
            @await Html.PartialAsync("_OrderByDropdown")
            <div class="scenarios-buttons-row">
                @await Html.PartialAsync("_CollapseExpandGroupedScenariosButtons", "all-scenarios-container")
                @* <button class="button toggle-hide pointer" toggle-alternative-text="Hide Summary" element-id-to-hide="summary">Show Summary</button> *@
            </div>
        </div>

        <div class="mt-4 container invisible" id="summary">
            @await Html.PartialAsync("_SummaryGraphics", new SummaryViewModel {Scenarios = Model.SelectMany(x => x).ToList()})
        </div>

        <div class="scrollable-table-container">
            <table class="table is-fullwidth">
                <thead>
                <tr>
                    <th class="has-text-centered">Scenario</th>
                    <th class="has-text-centered">Status</th>
                    <th class="has-text-centered">Duration</th>
                    <th class="has-text-centered">Start</th>
                    <th class="has-text-centered">End</th>
                </tr>
                </thead>
                <tbody>

                @{ var scenarioIndex = new ReferenceInt(0); }
                @{ var groupedScenariosCount = new ReferenceInt(0); }
                @foreach (var groupedScenarios in pager.ItemsForCurrentPage)
                {
                    @await Html.PartialAsync("_GroupedScenarioTableRow", new GroupedScenarioViewModel
                    {
                        Scenarios = groupedScenarios.ToList(),
                        ScenarioIndex = scenarioIndex,
                        GroupedScenarioIndex = groupedScenariosCount,
                    })
                }

                </tbody>
            </table>
        </div>

        @if (pager.TotalItems == 0)
        {
            @(await Html.PartialAsync("_WowSuchEmpty"))
        }
    </div>


        @{
            var allScenarios = pager.ItemsForCurrentPage.SelectMany(groupedScenarios => groupedScenarios).ToList();
        }
        @for (var index = 0; index < allScenarios.Count; index++)
        {
            var lastScenario = allScenarios.ElementAtOrDefault(index - 1);
            var scenario = allScenarios[index];
            var nextScenario = allScenarios.ElementAtOrDefault(index + 1);
            
            @await Html.PartialAsync("_ScenarioModalPopup", new ScenarioModalViewModel
            {
                LastScenario = lastScenario,
                Scenario = scenario,
                NextScenario = nextScenario
            })
        }

    </div>
</section>

<div class="container mb-6">
    <nav class="level">
        <div class="level-item">
            @await Html.PartialAsync("_PaginationButtons", pager.GetPaginationInformation())
        </div>
    </nav>
</div>