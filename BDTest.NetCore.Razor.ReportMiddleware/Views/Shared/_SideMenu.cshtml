@using BDTest.Maps
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Interfaces
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@using Microsoft.AspNetCore.Http.Extensions
@inject IDataRepository _dataRepository;
@inject BDTestReportServerOptions BdTestReportServerOptions

@{
  var id = ViewBag.Id;
    var customTabsProvider = BdTestReportServerOptions.CustomSidebarLinksProvider;
    
    BDTestOutputModel currentTestReport = string.IsNullOrEmpty(id) ? null : await _dataRepository.GetData(id);
    var metrics = new OutputMetrics(currentTestReport);
}

<div class="d-flex flex-column flex-shrink-0 p-3 bg-light" style="width: 280px; overflow-y: auto; margin-top: 87px">
  
  <ul class="nav nav-pills flex-column mb-auto">
    <li class="nav-item">
      <a href="~/bdtest/report/test-runs" class="nav-link link-dark @GetIsActive("/test-runs")" aria-current="page">
        <svg class="bi me-2" width="16" height="16"><use xlink:href="#home"/></svg>
        Home / Test Runs
      </a>
    </li>
    <li>
      <a href="~/bdtest/report/trends" class="nav-link link-dark @GetIsActive("/trends")">
        <svg class="bi me-2" width="16" height="16"><use xlink:href="#graph-up"/></svg>
        Trends
      </a>
    </li>
    <li>
      <a href="~/bdtest/report/test-run-flakiness" class="nav-link link-dark @GetIsActive("/test-run-flakiness")">
        <svg class="bi me-2" width="16" height="16"><use xlink:href="#bug"/></svg>
        Flakey Tests
      </a>
    </li>
    
    @if (currentTestReport != null)
    {
      <li class="border-top my-3"></li>

      <li>
        <btn class="btn btn-lg">
          <svg class="bi me-2" width="16" height="16"><use xlink:href="#clipboard-data"/></svg>
          This Test Report
        </btn>
      </li>

      <li class="mb-1 ms-2">
        <button class="btn btn-toggle align-items-center rounded" data-bs-toggle="collapse" data-bs-target="#this-test-report-navigation-collapse" aria-expanded="true">
          Navigation
        </button>
        <div class="collapse show" id="this-test-report-navigation-collapse">
          <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
            <li><a href="~/bdtest/report/@currentTestReport.Id/summary" class="link-dark rounded nav-link">Summary</a></li>
            @if (metrics.AnyExceptions)
            {
              <li><a href="~/bdtest/report/@currentTestReport.Id/top-defects" class="link-dark rounded nav-link">Top Defects</a></li>
            }
            <li><a href="~/bdtest/report/@currentTestReport.Id/stories" class="link-dark rounded nav-link">Stories</a></li>
            <li><a href="~/bdtest/report/@currentTestReport.Id/all-scenarios" class="link-dark rounded nav-link">Scenarios</a></li>
            @if (!metrics.AllPassed)
            {
              <li><a href="~/bdtest/report/@currentTestReport.Id/all-scenarios?filterByStatus=Failed" class="link-dark rounded nav-link indent-text-2">Success</a></li>
              @if (metrics.AnyFailed)
              {
                <li><a href="~/bdtest/report/@currentTestReport.Id/all-scenarios?filterByStatus=Failed" class="link-dark rounded nav-link indent-text-2">Failed</a></li>
              }
              @if (metrics.AnySkipped)
              {
                <li><a href="~/bdtest/report/@currentTestReport.Id/all-scenarios?filterByStatus=Skipped" class="link-dark rounded nav-link indent-text-2">Skipped</a></li>
              }
              @if (metrics.AnyNotImplemented)
              {
                <li><a href="~/bdtest/report/@currentTestReport.Id/all-scenarios?filterByStatus=NotImplemented" class="link-dark rounded nav-link indent-text-2">Not Implemented</a></li>
              }
              @if (metrics.AnyInconclusive)
              {
                <li><a href="~/bdtest/report/@currentTestReport.Id/all-scenarios?filterByStatus=Inconclusive" class="link-dark rounded nav-link indent-text-2">Inconclusive</a></li>
              }
            }
            <li><a href="~/bdtest/report/@currentTestReport.Id/timings" class="link-dark rounded nav-link">Timings</a></li>
          </ul>
        </div>
      </li>

      <li class="mb-1 ms-2">
        <button class="btn btn-toggle align-items-center rounded" data-bs-toggle="collapse" data-bs-target="#this-test-report-details-collapse" aria-expanded="true">
          Details
        </button>
        <div class="collapse show" id="this-test-report-details-collapse">
          <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
            <li><a class="nav-link link-dark pb-0"><strong>Status:</strong></a></li>
            @{ var totalStatus = @currentTestReport.Scenarios.GetTotalStatus(); }
            <li>
              <div class="d-grid"><button class="btn @totalStatus.GetCssColourValueForStatus() ms-4">@totalStatus</button></div></li>
            @if (currentTestReport.Environment != null)
            {
              <li><a class="nav-link link-dark pb-0"><strong>Environment:</strong></a></li>
              <li class="ms-2"><a class="nav-link link-dark pt-0">@currentTestReport.Environment</a></li>
            }
            @if (currentTestReport.Tag != null)
            {
              <li><a class="nav-link link-dark pb-0"><strong>Tag:</strong></a></li>
              <li class="ms-2"><a class="nav-link link-dark pt-0">@currentTestReport.Tag</a></li>
            }
            @if (currentTestReport.BranchName != null)
            {
              <li><a class="nav-link link-dark pb-0"><strong>Branch:</strong></a></li>
              <li class="ms-2"><a class="nav-link link-dark pt-0">@currentTestReport.BranchName</a></li>
            }
          </ul>
        </div>
      </li>
    }


    <li class="border-top my-3"></li>
          <li class="mb-1">
            <button class="btn btn-toggle align-items-center rounded collapsed" data-bs-toggle="collapse" data-bs-target="#actions-links-collapse" aria-expanded="false">
              <svg class="bi me-2" width="16" height="16"><use xlink:href="#mouse"/></svg>
              Actions
            </button>
            <div class="collapse" id="actions-links-collapse">
              <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                @{ var url = Context.Request.GetEncodedUrl(); }
                <li><a href="#" onclick="copyToClipboard('@url');" class="link-dark rounded nav-link">Copy URL to Clipboard</a></li>
                @if (currentTestReport != null)
                {
                  <li><a download href="~/bdtest/report/@currentTestReport.Id/raw-json-data" class="link-dark rounded nav-link">Download Raw Json Data</a></li>
                }
              </ul>
            </div>
          </li>

      @{
        var customLinks = BdTestReportServerOptions.CustomSidebarLinksProvider?.GetCustomLinks(currentTestReport)?.ToList();
      }
    
    @if (customLinks?.Any() == true)
    {
      <li class="border-top my-3"></li>
      <li class="mb-1">
        <button class="btn btn-toggle align-items-center rounded collapsed" data-bs-toggle="collapse" data-bs-target="#custom-links-collapse" aria-expanded="false">
          <svg class="bi me-2" width="16" height="16"><use xlink:href="#link"/></svg>
          Custom Links
        </button>
        <div class="collapse" id="custom-links-collapse">
          <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
            @foreach (var customLinkData in customLinks)
            {
              <li><a href="@(customLinkData.Url ?? "#")" class="link-dark rounded nav-link" target="_blank">@customLinkData.Text</a></li>  
            }
          </ul>
        </div>
      </li>
    }
  </ul>

  @{
    var profilePictureUri = BdTestReportServerOptions.UserPersonalizer?.GetProfilePictureUri(Context);
    var nameOfUser = BdTestReportServerOptions.UserPersonalizer?.GetNameOfUser(Context);
    var customLinkDatas = BdTestReportServerOptions.UserPersonalizer?.GetLinksForUser(Context);
    var hasUserSpecificLinks = customLinkDatas?.Any() == true;
  }
  @if (profilePictureUri != null || nameOfUser != null)
  {
    <hr>
    
    <div class="dropdown">
      <a href="#" class="d-flex align-items-center link-dark text-decoration-none @(hasUserSpecificLinks ? "dropdown-toggle" : "") @(profilePictureUri == null ? "indent-text-2" : "")" id="dropdownUser" data-bs-toggle="dropdown" aria-expanded="false">
        @if (profilePictureUri != null)
        {
          <img src="@profilePictureUri" alt="" width="32" height="32" class="rounded-circle me-2">
        }

        @if (nameOfUser != null)
        {
          <strong>@nameOfUser</strong>
        }
      </a>
      
      @if (hasUserSpecificLinks)
      {
        <ul class="dropdown-menu dropdown-menu-dark text-small shadow" aria-labelledby="dropdownUser">
          @foreach (var customLinkData in customLinkDatas)
          {
            <li><a class="dropdown-item" href="@(customLinkData.Url ?? "#")" target="_blank">@customLinkData.Text</a></li>
          }
          @* <li><hr class="dropdown-divider"></li> *@
          @* <li><a class="dropdown-item" href="#">Sign out</a></li> *@
        </ul>
      }
    </div>
  }
</div>

@functions
{

    private string GetIsActive(string path)
    {
        if (Context.Request.Path.Value?.ToLowerInvariant().Contains(path.ToLower()) == true)
        {
            return "active";
        }

        return string.Empty;
    }
}