@using BDTest.Maps
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.Test
@model BDTest.NetCore.Razor.ReportMiddleware.Models.ChartViewModel

@functions {
    private bool TryFindReportId(Scenario scenario, List<BDTestOutputModel> reports, out string reportId)
    {
        var foundReportForScenario = reports.FirstOrDefault(report => report.Scenarios.Select(x => x.Guid).Contains(scenario.Guid));
        reportId = foundReportForScenario?.Id;
        return foundReportForScenario != null;
    }

}

@* Success Trend Chart *@
<script>
{              
let reportIdsArray = [];
let scenarioIdsArray = [];

@foreach (var scenario in Model.Scenarios)
{
    var reportIdForScenario = scenario.ReportId;
    if (string.IsNullOrEmpty(reportIdForScenario))
    {
        TryFindReportId(scenario, Model.Reports, out reportIdForScenario);
    }

    @:reportIdsArray.push("@reportIdForScenario");
    @:scenarioIdsArray.push("@scenario.Guid");
}
    
let successChartContext = document.getElementById('success-trend-chart-@Model.Index').getContext('2d');
data = {
    datasets: [ 
        {
            label: "Failed",
            backgroundColor: "#f14668",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#f14668",
            pointBackgroundColor: "#f14668",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.Failed ? 1 : 0))
            ]    
        },
        {
            label: "Inconclusive",
            backgroundColor: "#ffdd57",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#ffdd57",
            pointBackgroundColor: "#ffdd57",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.Inconclusive ? 1 : 0))
            ]    
        },
        {
            label: "Not Implemented",
            backgroundColor: "#ffdd57",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#ffdd57",
            pointBackgroundColor: "#ffdd57",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.NotImplemented ? 1 : 0))
            ]    
        },
        {
            label: "Skipped",
            backgroundColor: "#ffdd57",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#ffdd57",
            pointBackgroundColor: "#ffdd57",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.Skipped ? 1 : 0))            
            ]    
        },
        {
            label: "Passed",
            backgroundColor: "#48c774",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "#48c774",
            pointBackgroundColor: "#48c774",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.Passed ? 1 : 0))
            ]    
        }
        ],

    labels: [
        @foreach (var scenario in Model.Scenarios)
        {
            @:"@scenario.StartTime.ToStringForReport(false)",
        }
    ]
}

let successChart = new Chart(successChartContext, {
    type: 'line',
    data: data,
    options: {
        legend: {
                    display: false
                },
        scales: {
            yAxes: [{
              scaleLabel: {
                labelString: 'Seconds'
              },
              stacked: true,
              ticks: {
                  beginAtZero:true,
                  // Include a dollar sign in the ticks
                  callback: function(value, index, values) {
                      return "";
                  }
                  }
            }]
          }
    }
});

@if (Model.Scenarios.All(x => !string.IsNullOrEmpty(x.ReportId) || TryFindReportId(x, Model.Reports, out _)))
{
    <text>
    
    function chartOnClick(chart, event) {
       let activePoint = chart.getElementAtEvent(event);
          
       if (activePoint.length > 0) {
          let clickedDatasetIndex = activePoint[0]._datasetIndex;
          let clickedElementindex = activePoint[0]._index;
          
          let clickedOnReportId = reportIdsArray[clickedElementindex];
          let clickedOnScenarioId = scenarioIdsArray[clickedElementindex];
    
          window.location.href = '@Context.GetBaseUrl()/bdtest/report/' + clickedOnReportId + '/all-scenarios?page=all&scenarioId=' + clickedOnScenarioId;
       }
    }
    
    document.getElementById('success-trend-chart-@Model.Index').onclick = function(evt) {
        chartOnClick(successChart, evt);
    }
    
    </text>
}

}
</script>