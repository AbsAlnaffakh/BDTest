@using BDTest.Maps
@using BDTest.NetCore.Razor.ReportMiddleware.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.Test
@model BDTest.NetCore.Razor.ReportMiddleware.Models.ChartViewModel

@functions {
    private bool TryFindReportId(Scenario scenario, List<BDTestOutputModel> reports, out string reportId)
    {
        var foundReportForScenario = reports.FirstOrDefault(report => report.Scenarios.Select(x => x.Guid).Contains(scenario.Guid));
        reportId = foundReportForScenario?.Id;
        return foundReportForScenario != null;
    }

}

@* Success Trend Chart *@
<script>
{              
let reportIdsArray = [];
let scenarioIdsArray = [];

@foreach (var scenario in Model.Scenarios)
{
    var reportIdForScenario = scenario.ReportId;
    if (string.IsNullOrEmpty(reportIdForScenario))
    {
        TryFindReportId(scenario, Model.Reports, out reportIdForScenario);
    }

    @:reportIdsArray.push("@reportIdForScenario");
    @:scenarioIdsArray.push("@scenario.Guid");
}
    
let chartData = {
    datasets: [ 
        {
            label: "Failed",
            axis: 'y',
            fill: true,
            backgroundColor: "@ColourConstants.DangerHex",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "@ColourConstants.DangerHex",
            pointBackgroundColor: "@ColourConstants.DangerHex",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.Failed ? 1 : 0))
            ]    
        },
        {
            label: "Inconclusive",
            axis: 'y',
            fill: true,
            backgroundColor: "@ColourConstants.WarningHex",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "@ColourConstants.WarningHex",
            pointBackgroundColor: "@ColourConstants.WarningHex",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.Inconclusive ? 1 : 0))
            ]    
        },
        {
            label: "Not Implemented",
            axis: 'y',
            fill: true,
            backgroundColor: "@ColourConstants.WarningHex",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "@ColourConstants.WarningHex",
            pointBackgroundColor: "@ColourConstants.WarningHex",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.NotImplemented ? 1 : 0))
            ]    
        },
        {
            label: "Skipped",
            axis: 'y',
            fill: true,
            backgroundColor: "@ColourConstants.WarningHex",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "@ColourConstants.WarningHex",
            pointBackgroundColor: "@ColourConstants.WarningHex",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.Skipped ? 1 : 0))            
            ]    
        },
        {
            label: "Passed",
            axis: 'y',
            fill: true,
            backgroundColor: "@ColourConstants.SuccessHex",
            borderColor: "rgba(0,0,0,0)",
            pointBorderColor: "@ColourConstants.SuccessHex",
            pointBackgroundColor: "@ColourConstants.SuccessHex",
            pointHitRadius: 15,
            pointRadius: 0,
            borderWidth: 0,
            data: [
                @string.Join(",", Model.Scenarios.Select(summary => summary.Status == Status.Passed ? 1 : 0))
            ]    
        }
        ],

    labels: [
        @foreach (var scenario in Model.Scenarios)
        {
            @:"@scenario.StartTime.ToStringForReport(false)",
        }
    ]
}

let chartConfig = {
    type: 'line',
    data: chartData,
    options: {
        legend: {
                    display: false
                },
        scales: {
            y: {
              scaleLabel: {
                labelString: 'Status'
              },
              stacked: true,
              ticks: {
                  beginAtZero:true,
                  // Include a dollar sign in the ticks
                  callback: function(value, index, values) {
                      return "";
                  }
              }
            }
          },
          onClick: (e) => {
            let canvasPosition = Chart.helpers.getRelativePosition(e, e.chart);
            let clickedElementindex = e.chart.scales.x.getValueForPixel(canvasPosition.x);
            
            let clickedOnReportId = reportIdsArray[clickedElementindex];
            let clickedOnScenarioId = scenarioIdsArray[clickedElementindex];
    
            window.location.href = '@Context.GetBaseUrl()/bdtest/report/' + clickedOnReportId + '/scenarios/' + clickedOnScenarioId;
            
            spinnerCursor();
        }
    }
};

let successChart = new Chart(document.getElementById('success-trend-chart-@Model.Index'), chartConfig);

}
</script>