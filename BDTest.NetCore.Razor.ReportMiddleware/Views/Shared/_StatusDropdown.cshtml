@using BDTest.NetCore.Razor.ReportMiddleware.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.Test
@model BDTest.NetCore.Razor.ReportMiddleware.Models.StatusDropdownViewModel
<div class="dropdown">
  <div class="dropdown-trigger">
    <button class="btn btn-primary" aria-haspopup="true" aria-controls="dropdown-menu" id="dropdown-main-button">
      Show All <i class="arrow down"></i>
      @* <span class="icon is-small"> *@
      @*   <i class="fas fa-angle-down" aria-hidden="true"></i> *@
      @* </span> *@
    </button>
  </div>
  <div class="dropdown-menu has-text-centered" id="dropdown-menu" role="menu">
    <button class="btn btn-primary is-fullwidth" onclick="filterByStatus('@StatusConstants.All');">
              Show All
            </button>
    <hr class="dropdown-divider">
    <div class="dropdown-content has-text-centered">
      <a href="#" class="dropdown-item">
        <button class="btn btn-success" onclick="filterByStatus('@Status.Passed');">
          Show Passed
        </button>
      </a>
      <a class="dropdown-item">
        <button class="btn btn-danger" onclick="filterByStatus('@Status.Failed');">
          Show Failures
        </button>
      </a>
      <a href="#" class="dropdown-item">
        <button class="btn btn-warning" onclick="filterByStatus('@Status.Skipped');">
          Show Skipped
        </button>
      </a>
      <a href="#" class="dropdown-item">
        <button class="btn btn-warning" onclick="filterByStatus('@Status.Inconclusive');">
          Show Inconclusive
        </button>
      </a>
      <a href="#" class="dropdown-item">
        <button class="btn btn-warning" onclick="filterByStatus('@Status.NotImplemented');">
          Show Not Implemented
        </button>
      </a>
    </div>
  </div>
</div>

@if (Model.IncludeScript)
{
  <script>
  function filterByStatus(status) {
    let currentFilterQueryParameter = '@Context.Request.GetQueryParameter("filterByStatus")'
    
    let mainDropdownButton = document.getElementById("dropdown-main-button");
    
    switch (status) {
      case '@StatusConstants.All':
        mainDropdownButton.innerHTML = 'Show All <i class="arrow down"></i>';
        mainDropdownButton.className = "btn has-text-centered btn-primary";
        break;
      case '@Status.Passed':
        mainDropdownButton.innerHTML = 'Show Success <i class="arrow down"></i>';
        mainDropdownButton.className = "btn has-text-centered btn-success";
        break;
      case '@Status.Failed':
        mainDropdownButton.innerHTML = 'Show Failures <i class="arrow down"></i>';
        mainDropdownButton.className = "btn has-text-centered btn-danger";
        break;
      case '@Status.Skipped':
        mainDropdownButton.innerHTML = 'Show Skipped <i class="arrow down"></i>';
        mainDropdownButton.className = "btn has-text-centered btn-warning";
        break;
      case '@Status.Inconclusive':
        mainDropdownButton.innerHTML = 'Show Inconclusive <i class="arrow down"></i>';
        mainDropdownButton.className = "btn has-text-centered btn-warning";
        break;
      case '@Status.NotImplemented':
        mainDropdownButton.innerHTML = 'Show Not Implemented <i class="arrow down"></i>';
        mainDropdownButton.className = "btn has-text-centered btn-warning";
        break;
      }
      
      if (currentFilterQueryParameter !== status) {
        window.location.href = getUrlWithAppendedParameter("filterByStatus", status);
      }
    }
</script>
}