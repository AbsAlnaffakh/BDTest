@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@model BDTest.NetCore.Razor.ReportMiddleware.Models.ViewModels.TestTimesPieChartViewModel

@{
    var orderedByTime = Model.Scenarios.OrderBy(scenario => scenario.TimeTaken).ToList();
    var fastestScenarios = orderedByTime.Take(10).ToList();
    var slowestScenarios = orderedByTime.TakeLast(10).ToList();
    //var scenarios = shortestScenarios.Union(longestScenarios).ToList();
}
<script>
let slowestIdsArray = [];
@foreach (var scenario in slowestScenarios)
{
    @:slowestIdsArray.push("@scenario.Guid");
}

let fastestIdsArray = [];
@foreach (var scenario in fastestScenarios)
{
    @:fastestIdsArray.push("@scenario.Guid");
}
</script>

<div class="container mb-5">
    <h4>Slowest Tests</h4>
    <div>
        <canvas id="slowest-tests-chart-@Model.StoryIndex" style="max-width: 100%"></canvas>
    </div>
</div>

<div class="container">
    <h4>Fastest Tests</h4>
    <div>
        <canvas id="fastest-tests-chart-@Model.StoryIndex" style="max-width: 100%"></canvas>
    </div>
</div>

<script>
{       
let slowestTestsChartData = {
    datasets: [{
        data: [
            @foreach (var scenario in slowestScenarios)
                    {
                        @((long)scenario.TimeTaken.TotalMilliseconds)@:,
                    }
            ],
            label: 'Milliseconds',
            backgroundColor: [
                @for (var index = 0; index < slowestScenarios.Count; index++)
                {
                    @:getRandomColor(),
                }
            ]
    }],

    labels: [
        @foreach (var scenario in slowestScenarios)
        {
            @:'@scenario.GetScenarioText()',
        }
    ]
}

let slowestTestsChartConfig = {
    type: 'bar',
    data: slowestTestsChartData,
    options: {
        legend: {
                    display: false
                },
        scales: {
            y: {
              ticks: {
                      // Include a dollar sign in the ticks
                      callback: function(value, index, values) {
                          return value + "ms";
                      }
                  }
            }
          },
        tooltips: {
            callbacks: {
                label: function(tooltipItem, data) {
                  return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] + "ms";
                }
            }
        },
         onClick: (e) => {
             let canvasPosition = Chart.helpers.getRelativePosition(e, e.chart);
             let clickedElementindex = e.chart.scales.x.getValueForPixel(canvasPosition.x);
             
             let clickedOnScenarioId = slowestIdsArray[clickedElementindex];
                  
             window.location.href = '@Context.GetBaseUrl()/bdtest/report/@Model.ReportId/scenario/' + clickedOnScenarioId;
             
             spinnerCursor();
         }
    }
}

let slowestTestsChart = new Chart(document.getElementById("slowest-tests-chart-@Model.StoryIndex"), slowestTestsChartConfig)

let fastestTestsChartData = {
    datasets: [{
        data: [
            @foreach (var scenario in fastestScenarios)
                    {
                        @((long)scenario.TimeTaken.TotalMilliseconds)@:,
                    }
            ],
            label: 'Milliseconds',
            backgroundColor: [
                @for (var index = 0; index < fastestScenarios.Count; index++)
                {
                    @:getRandomColor(),
                }
            ]
    }],

    labels: [
        @foreach (var scenario in fastestScenarios)
        {
            @:'@scenario.GetScenarioText()',
        }
    ]
}

let fastestTestsChartConfig = {
    type: 'bar',
    data: fastestTestsChartData,
    options: {
        legend: {
                    display: false
                },
        scales: {
            y: {
              ticks: {
                      // Include a dollar sign in the ticks
                      callback: function(value, index, values) {
                          return value + "ms";
                      }
                  }
            }
          },
        tooltips: {
            callbacks: {
                label: function(tooltipItem, data) {
                  return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] + "ms";
                }
            }
        },
         onClick: (e) => {
             let canvasPosition = Chart.helpers.getRelativePosition(e, e.chart);
             let clickedElementindex = e.chart.scales.x.getValueForPixel(canvasPosition.x);
             
             let clickedOnScenarioId = fastestIdsArray[clickedElementindex];
     
             window.location.href = '@Context.GetBaseUrl()/bdtest/report/@Model.ReportId/scenario/' + clickedOnScenarioId;
             
             spinnerCursor();
         }
    }
}

let fastestTestsChart = new Chart(document.getElementById("fastest-tests-chart-@Model.StoryIndex"), fastestTestsChartConfig)
}
</script>