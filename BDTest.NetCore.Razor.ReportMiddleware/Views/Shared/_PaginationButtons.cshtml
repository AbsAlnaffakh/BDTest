@using BDTest.NetCore.Razor.ReportMiddleware.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.NetCore.Razor.ReportMiddleware.Models
@model BDTest.NetCore.Razor.ReportMiddleware.Constants.PaginationInformation

@if (Model.TotalPages <= 1)
{
    return;
}

<nav class="pagination is-rounded is-centered" role="navigation" aria-label="pagination">
    @if (Model.CurrentPage != Model.StartPage)
    {
        <a class="pagination-previous" href="@Context.GetUrlForPageNumber(Model.CurrentPage - 1)">Previous</a>
    }
    @if (Model.CurrentPage != Model.EndPage)
    {
        <a class="pagination-next" href="@Context.GetUrlForPageNumber(Model.CurrentPage+1)">Next page</a>
    }
    <a class="pagination-next" href="@Context.GetCurrentUrl().WithQueryParameter(PagerQueryParameters.Page, PagerQueryParameters.All)">Show All</a>
    <ul class="pagination-list">

        @if (Model.TotalPages <= 6)
        {
            for (var i = 1; i <= Model.TotalPages; i++)
            {
                @await Html.PartialAsync("_PageButton", (i, Model.CurrentPage))
            }
        }
        else if(Model.CurrentPage > 2 && Model.CurrentPage < Model.EndPage - 2)
        {
            @await Html.PartialAsync("_PageButton", (1, Model.CurrentPage))

            <li>
                <span class="pagination-ellipsis">&hellip;</span>
            </li>
              
            @await Html.PartialAsync("_PageButton", (Model.CurrentPage-1, Model.CurrentPage))
              
            @await Html.PartialAsync("_PageButton", (Model.CurrentPage, Model.CurrentPage))
            
            @await Html.PartialAsync("_PageButton", (Model.CurrentPage+1, Model.CurrentPage))
            
            <li>
                <span class="pagination-ellipsis">&hellip;</span>
            </li>
            
            @await Html.PartialAsync("_PageButton", (Model.EndPage, Model.CurrentPage))
        }
        else if (Model.CurrentPage <= 2)
        {
            @await Html.PartialAsync("_PageButton", (1, Model.CurrentPage))
            
            @await Html.PartialAsync("_PageButton", (2, Model.CurrentPage))
            
            @await Html.PartialAsync("_PageButton", (3, Model.CurrentPage))
            
            <li>
                <span class="pagination-ellipsis">&hellip;</span>
            </li>
            
            @await Html.PartialAsync("_PageButton", (Model.EndPage, Model.CurrentPage))
        }
        else if (Model.CurrentPage >= Model.EndPage - 2)
        {
            @await Html.PartialAsync("_PageButton", (1, Model.CurrentPage))
            
            <li>           
                <span class="pagination-ellipsis">&hellip;</span>
            </li>

            @await Html.PartialAsync("_PageButton", (Model.EndPage-2, Model.CurrentPage))

            @await Html.PartialAsync("_PageButton", (Model.EndPage - 1, Model.CurrentPage))

            @await Html.PartialAsync("_PageButton", (Model.EndPage, Model.CurrentPage))
        }

    </ul>
</nav>