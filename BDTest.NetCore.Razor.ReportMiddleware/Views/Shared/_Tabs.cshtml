@using BDTest.Maps
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Interfaces
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.Extensions.DependencyInjection
@{ var id = ViewBag.Id; }
@inject IServiceProvider ServiceProvider

@{
    var summaryIsActive = Context.Request.Path.Value?.ToLowerInvariant().Contains("summary") == true ? "is-active" : "";
    var storiesIsActive = Context.Request.Path.Value?.ToLowerInvariant().Contains("stories") == true ? "is-active" : "";
    var allScenariosIsActive = Context.Request.Path.Value?.ToLowerInvariant().Contains("all-scenarios") == true ? "is-active" : "";
    var timingsIsActive = Context.Request.Path.Value?.ToLowerInvariant().Contains("timings") == true ? "is-active" : "";
    var topDefectsIsActive = Context.Request.Path.Value?.ToLowerInvariant().Contains("top-defects") == true ? "is-active" : "";
    var invisibleClass = string.IsNullOrEmpty(id) ? "invisible" : string.Empty;
    var customTabsProvider = ServiceProvider.GetService<IBDTestCustomTabsProvider>();
    
    BDTestOutputModel currentTestReport = string.IsNullOrEmpty(id) ? null : await ServiceProvider.GetService<IDataController>().GetData(id);
    var metrics = new OutputMetrics(currentTestReport);
    var anyExceptions = metrics.AnyExceptions;
}

<div class="tabs is-right mb-0">
    <ul>
        @if (!string.IsNullOrEmpty(id))
        {
            <li class="@summaryIsActive">
                <a href="~/bdtest/report/@id/summary">
                    <span>Summary</span>
                </a>
            </li>
            <li class="@storiesIsActive">
                <a href="~/bdtest/report/@id/stories">
                    <span>Stories</span>
                </a>
            </li>
            <li class="@allScenariosIsActive">
                <a href="~/bdtest/report/@id/all-scenarios">
                    <span>Scenarios</span>
                </a>
            </li>
            <li class="@timingsIsActive">
                <a href="~/bdtest/report/@id/timings">
                    <span>Timings</span>
                </a>
            </li>
        }
        @if (anyExceptions)
        {
            <li class="@topDefectsIsActive">
                <a href="~/bdtest/report/@id/top-defects">
                    <span>Top Defects</span>
                </a>
            </li>
        }
        @if (customTabsProvider != null)
        {
            foreach (var customTabData in customTabsProvider.GetCustomLinks())
            {
                <li>
                    <a href="@customTabData.Url">
                        <span>@customTabData.Text</span>
                    </a>
                </li>
            }
        }
        <li>
            @{
                var url = Context.Request.GetEncodedUrl();
            }
            <a onclick="copyToClipboard('@url');">
                <span>Copy URL to Clipboard</span>
            </a>
        </li>
    </ul>
</div>