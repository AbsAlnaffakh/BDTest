@using BDTest.Maps
@using BDTest.NetCore.Razor.ReportMiddleware.Constants
@using BDTest.NetCore.Razor.ReportMiddleware.Extensions
@using BDTest.NetCore.Razor.ReportMiddleware.Helpers
@using BDTest.Test
@model BDTest.NetCore.Razor.ReportMiddleware.Models.ChartViewModel

@functions {
    private bool TryFindReportId(Scenario scenario, List<BDTestOutputModel> reports, out string reportId)
    {
        var foundReportForScenario = reports.FirstOrDefault(x => x.Scenarios.Select(x => x.Guid).Contains(scenario.Guid));
        reportId = foundReportForScenario?.Id;
        return foundReportForScenario != null;
    }

}

@* Duration Trend Chart *@
<script>
{
let reportIdsArray = [];
let scenarioIdsArray = [];

@foreach (var scenario in Model.Scenarios)
{
    var reportIdForScenario = scenario.ReportId;
    if (string.IsNullOrEmpty(reportIdForScenario))
    {
        TryFindReportId(scenario, Model.Reports, out reportIdForScenario);
    }

    @:reportIdsArray.push("@reportIdForScenario");
    @:scenarioIdsArray.push("@scenario.Guid");
}
    
let chartData = {
    datasets: [{
        backgroundColor: "@ColourConstants.PrimaryHex",
        borderColor: "@ColourConstants.PrimaryHex",
        label: "Milliseconds",
        data: [
            @foreach (var timespan in Model.Scenarios.Select(model => model.EndTime - model.StartTime))
            {
                @((long)timespan.TotalMilliseconds)@:,
            }
            ]
    }],

    labels: [
        @foreach (var scenario in Model.Scenarios)
        {
            @:"@scenario.StartTime.ToStringForReport(false)",
        }
    ]
}

let chartConfig = {
    type: 'line',
    data: chartData,
    options: {
            legend: {
                        display: false
                    },
            scales: {
                y: {
                  scaleLabel: {
                    labelString: 'Milliseconds'
                  },
                  ticks: {
                      beginAtZero:true,
                      // Include a dollar sign in the ticks
                      callback: function(value, index, values) {
                          return value + "s";
                      }
                      }
                }
              },
            tooltips: {
                callbacks: {
                    label: function(tooltipItem, data) {
                      return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] + " seconds";
                    }
                }
            },
            onClick: (e) => {
                let canvasPosition = Chart.helpers.getRelativePosition(e, e.chart);
                let clickedElementindex = e.chart.scales.x.getValueForPixel(canvasPosition.x);
                
                let clickedOnReportId = reportIdsArray[clickedElementindex];
                let clickedOnScenarioId = scenarioIdsArray[clickedElementindex];
        
                window.location.href = '@Context.GetBaseUrl()/bdtest/report/' + clickedOnReportId + '/scenario/' + clickedOnScenarioId;
                
                spinnerCursor();
            }
        }
    }

let durationChart = new Chart(document.getElementById('duration-trend-chart-@Model.Index'), chartConfig);
}
</script>