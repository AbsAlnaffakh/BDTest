@using BDTest.ReportGenerator.Builders.Razor.Models
@model BDTest.ReportGenerator.Models.DataOutputModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>BDTest Report</title>
    <link rel="stylesheet" href="./bdtest-reportdependencies/bulma/bulma.min.css"/>
    @await Html.PartialAsync("_Javascript.cshtml")
</head>
<body class="has-navbar-fixed-top">
@await Html.PartialAsync("NavBarHeader.cshtml")
<section class="section">
    <div class="container">
        <div class="columns is-centered">
            <div class="column has-text-centered">
                <p class="subtitle">
                    Welcome to your report by <strong>BDTest</strong>!
                </p>
            </div>
        </div>
    </div>
</section>
<section class="section">
    <div class="container">
        <h2 class="subtitle">
            Here is a <strong>summary</strong> of your tests:
        </h2>

        @await Html.PartialAsync("SummaryGraphics.cshtml", new SummaryViewModel {Scenarios = Model.Scenarios})

        
    </div>
</section>

@{
    var scenariosGroupedByStories = @Model.Scenarios.GroupBy(scenario => scenario.GetStoryText());
}

<section class="section">
    <div class="container">
        <h2 class="subtitle">
            Here are the <strong>stories</strong> that you've tested:
        </h2>
        
        @{ var storyIndex = 0; }
        @foreach(var story in scenariosGroupedByStories)
        {
            storyIndex++;
                var scenariosForThisStory = story.ToList();

            <article class="message is-large">
                <div class="message-header">
                    <h4>@story.Key</h4>
                    <button class="delete toggle-hide" aria-label="minimise" element-id-to-hide="story-@storyIndex"/>
                </div>
                <div class="message-body" id="story-@storyIndex">
                    <p class="title is-5 toggle-hide" toggle-alternative-text="Summary" element-id-to-hide="story-summary-@storyIndex">Click here to show a summary for this story</p>
                    <div class="mt-4" style="display: none" id="story-summary-@storyIndex">
                        @await Html.PartialAsync("SummaryGraphics.cshtml", new SummaryViewModel {Scenarios = scenariosForThisStory})
                    </div>

                    <div class="my-6"></div>

                    <h5 class="title is-5">Scenarios</h5>

                    @foreach (var groupedScenarios in scenariosForThisStory.GroupBy(scenario => scenario.GetScenarioText()))
                    {
                        if (groupedScenarios.Count() == 1)
                        {
                            var scenario = groupedScenarios.First();
                            // WriteScenario
                            <h6 class="title is-6">@scenario.GetScenarioText()</h6>
                        }
                        else
                        {
                            // Write Grouped
                        }
                    }

                </div>
            </article>

        }
    </div>
</section>

</body>
</html>