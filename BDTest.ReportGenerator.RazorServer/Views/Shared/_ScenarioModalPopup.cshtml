@using BDTest.ReportGenerator.RazorServer.Extensions
@using BDTest.Test
@model BDTest.ReportGenerator.RazorServer.Models.ScenarioViewModel

<div class="modal" id="scenario-modal-@Model.Scenario.Guid">
    <div class="modal-background"></div>
    <div class="modal-card modal-card-wide">
        <header class="modal-card-head">
            <p class="modal-card-title">Scenario: @Model.Scenario.GetScenarioText()</p>
            <a class="delete" aria-label="close"></a>
        </header>
        <section class="modal-card-body">
            <div>
                <table class="table is-fullwidth">
                    <thead>
                    <tr>
                        <th class="has-text-centered">Step</th>
                        <th class="has-text-centered">Status</th>
                        <th class="has-text-centered">Duration</th>
                        <th class="has-text-centered">Start</th>
                        <th class="has-text-centered">End</th>
                    </tr>
                    </thead>
                    <tbody>

                    @{ var scenarioIndex = 0; }
                    @foreach (var step in Model.Scenario.Steps)
                    {
                        <tr>
                            <td class="has-text-centered">
                                @if (!IsExpandable(step))
                                {
                                    @step.StepText
                                }
                                else
                                {
                                    <details>
                                        <summary>
                                            @step.StepText
                                        </summary>
                
                                        @if (!string.IsNullOrEmpty(step.Output))
                                        {
                                            <article class="message is-info mt-4">
                                                <div class="message-header">
                                                    <p>Output</p>
                                                </div>
                                                <div class="message-body">
                                                    @step.Output
                                                </div>
                                            </article>
                                        }
                
                                        @if (step.Exception != null)
                                        {
                                            <article class="message is-danger mt-4">
                                                <div class="message-header">
                                                    <p>Exception</p>
                                                </div>
                                                <pre class="message-body">
                            @step.Exception.ToString().Trim()
                        </pre>
                                            </article>
                                        }
                                    </details>
                                }
                            </td>
                            <td class="has-text-centered">
                                <button class="@step.Status.GetCssColourValueForStatus() button is-fullwidth no-pointer">@step.Status</button>
                            </td>
                            <td class="has-text-centered">@step.TimeTaken.ToPrettyFormat()</td>
                            <td class="has-text-centered">@step.StartTime.ToStringForReport()</td>
                            <td class="has-text-centered">@step.EndTime.ToStringForReport()</td>
                        </tr>
                    }

                    </tbody>
                </table>
            </div>
        </section>
        <footer class="modal-card-foot">
            <button class="button">Close</button>
        </footer>
    </div>
</div>

@functions 
{
    private bool IsExpandable(Step step)
    {
        return !string.IsNullOrEmpty(step.Output) || step.Exception != null;
    }
}