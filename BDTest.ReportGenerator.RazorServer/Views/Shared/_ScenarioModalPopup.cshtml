@using BDTest.ReportGenerator.RazorServer.Extensions
@using BDTest.ReportGenerator.RazorServer.Models
@using BDTest.Test
@using Microsoft.AspNetCore.Http.Extensions
@model BDTest.ReportGenerator.RazorServer.Models.ScenarioViewModel

@{
    var shareUrl = new Uri(Context.Request.GetEncodedUrl()).WithQueryParameter("scenarioId", Model.Scenario.Guid);
}

<div class="modal" id="scenario-modal-@Model.Scenario.Guid">
    <div class="modal-background"></div>
    <div class="modal-card modal-card-wide">
        <header class="modal-card-head">
            <p class="modal-card-title">Scenario: @Model.Scenario.GetScenarioText()</p>
            <img src="~/icons/share-black-18dp.svg" class="pointer mx-3" alt="Share" onclick="copyToClipboard('@shareUrl.ToString()')"/>
            <a class="delete" aria-label="close"></a>
        </header>
        <section class="modal-card-body">
            <div>
                @if (!string.IsNullOrEmpty(Model.Scenario.TestStartupInformation))
                {
                    @(await Html.PartialAsync("_CollapsableArticle", new CollapsableArticicleViewModel()
                    {
                        Header = "Test Start Up Info",
                        Body = Model.Scenario.TestStartupInformation,
                        StartCollapsed = true
                    }))
                }
                
                <table class="table is-fullwidth">
                    <thead>
                    <tr>
                        <th class="has-text-centered">Step</th>
                        <th class="has-text-centered">Status</th>
                        <th class="has-text-centered">Duration</th>
                        <th class="has-text-centered">Start</th>
                        <th class="has-text-centered">End</th>
                    </tr>
                    </thead>
                    <tbody>

                    @foreach (var step in Model.Scenario.Steps)
                    {
                        <tr>
                            <td class="has-text-centered">
                                @if (!IsExpandable(step))
                                {
                                    <button class="is-info is-fullwidth button no-pointer">
                                        @step.StepText
                                    </button>
                                }
                                else
                                {
                                    <details class="mr-5half">
                                        <summary class="is-info is-fullwidth button">
                                            @step.StepText
                                        </summary>

                                        @if (!string.IsNullOrEmpty(step.Output))
                                        {
                                            <article class="message is-info mt-4">
                                                <div class="message-header">
                                                    <p>Output</p>
                                                </div>
                                                <div class="message-body">
                                                    @step.Output
                                                </div>
                                            </article>
                                        }

                                        @if (step.Exception != null)
                                        {
                                            <article class="message is-danger mt-4">
                                                <div class="message-header">
                                                    <p>Exception</p>
                                                </div>
                                                <pre class="message-body has-text-left">@step.Exception.Trim()</pre>
                                            </article>
                                        }
                                    </details>
                                }
                            </td>
                            <td class="has-text-centered">
                                <button class="@step.Status.GetCssColourValueForStatus() button is-fullwidth no-pointer">@step.Status.AsString()</button>
                            </td>
                            <td class="has-text-centered">@step.TimeTaken.ToPrettyFormat()</td>
                            <td class="has-text-centered">@step.StartTime.ToStringForReport()</td>
                            <td class="has-text-centered">@step.EndTime.ToStringForReport()</td>
                        </tr>
                    }

                    </tbody>
                </table>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Scenario.TearDownOutput))
            {
                @(await Html.PartialAsync("_CollapsableArticle", new CollapsableArticicleViewModel()
                {
                    Header = "Test Teardown Info",
                    Body = Model.Scenario.TearDownOutput,
                    StartCollapsed = true
                }))
            }
            
            @if (!string.IsNullOrEmpty(Model.Scenario.CustomHtmlOutputForReport))
            {
                <div class="container">
                    <h2 class="subtitle">Custom:</h2>
                    @Html.Raw(Model.Scenario.CustomHtmlOutputForReport)
                </div>
            }
            
        </section>
        <footer class="modal-card-foot">
            <button class="button">Close</button>
        </footer>
    </div>
</div>

@functions 
{
    private bool IsExpandable(Step step)
    {
        return !string.IsNullOrEmpty(step.Output) || step.Exception != null;
    }
}