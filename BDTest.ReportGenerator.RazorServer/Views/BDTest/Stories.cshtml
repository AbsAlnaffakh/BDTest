@using BDTest.ReportGenerator.Builders.Razor.Models
@using BDTest.ReportGenerator.RazorServer.Extensions
@using BDTest.ReportGenerator.RazorServer.Models
@model BDTest.Maps.BDTestOutputModel

@{
    ViewBag.Title = "Stories";
    Layout = "_Layout";
}

@{
    var scenariosGroupedByStories = @Model.Scenarios.GroupBy(scenario => scenario.GetStoryText());
}

<section class="hero is-info">
    <div class="hero-body">
        <div class="container">
            <h1 class="title">
                Stories
            </h1>
            <h2 class="subtitle">
                Here are the <strong>stories</strong> that you've tested:
            </h2>
        </div>
    </div>
</section>

@{ var storyIndex = 0; }

<div id="stories-container">
    
    <div class="buttons is-right mr-4 mt-4">
        @await Html.PartialAsync("_CollapseExpandGroupedScenariosButtons", "stories-container")
    </div>
    
    @foreach (var story in scenariosGroupedByStories)
    {
        storyIndex++;
        var scenariosForThisStory = story.ToList();
        var scenariosGroupedByScenarioText = scenariosForThisStory.GroupBy(scenario => scenario.GetScenarioText()).ToList();

        <section class="section">
            <section class="hero @scenariosForThisStory.GetTotalStatus().GetCssColourValueForStatus()">
                <div class="hero-body">
                    <div class="container toggle-hide pointer" element-id-to-hide="story-@storyIndex">
                        <h1 class="title">Story:</h1>
                        @{
                            var storyTextSplitByLines = story.Key.SplitOnNewLines();
                            foreach (var line in storyTextSplitByLines)
                            {
                                <h2 class="subtitle mb-0">@line</h2>
                            }
                        }
                    </div>
                </div>
            </section>

            <div class="box" id="story-@storyIndex">
                <div class="has-text-right">
                    @await Html.PartialAsync("_CollapseExpandGroupedScenariosButtons", $"story-{storyIndex}")
                    <button class="button toggle-hide pointer" toggle-alternative-text="Hide Summary" element-id-to-hide="story-summary-@storyIndex">Show Summary</button>
                    <button class="button toggle-hide pointer" toggle-alternative-text="Hide Timings Chart" element-id-to-hide="story-summary-pie-chart-times-@storyIndex">Show Timings Chart</button>
                </div>

                <div class="mt-4 container invisible" id="story-summary-@storyIndex">
                    @await Html.PartialAsync("_SummaryGraphics", new SummaryViewModel {Scenarios = scenariosForThisStory})
                </div>

                <div class="mt-4 mb-6 container invisible pie-chart-large" id="story-summary-pie-chart-times-@storyIndex">
                    @await Html.PartialAsync("_TestTimesPieChart", new TestTimesPieChartViewModel {Scenarios = scenariosForThisStory, StoryIndex = storyIndex})
                </div>

                <table class="table is-fullwidth mt-4">
                    <thead>
                    <tr>
                        <th class="has-text-centered">Scenario</th>
                        <th class="has-text-centered">Status</th>
                        <th class="has-text-centered">Duration</th>
                        <th class="has-text-centered">Start</th>
                        <th class="has-text-centered">End</th>
                    </tr>
                    </thead>
                    <tbody>

                    @{ var scenarioIndex = new ReferenceInt(0); }
                    @{ var groupedScenariosCount = new ReferenceInt(0); }
                    @foreach (var groupedScenarios in scenariosGroupedByScenarioText)
                    {
                        @await Html.PartialAsync("_GroupedScenarioTableRow", new GroupedScenarioViewModel
                        {
                            Scenarios = groupedScenarios.ToList(),
                            ScenarioIndex = scenarioIndex,
                            GroupedScenarioIndex = groupedScenariosCount,
                        })
                    }

                    </tbody>
                </table>
            </div>

            @foreach (var scenario in scenariosGroupedByScenarioText.SelectMany(groupedScenarios => groupedScenarios))
            {
                @await Html.PartialAsync("_ScenarioModalPopup", new ScenarioViewModel
                {
                    Scenario = scenario
                })
            }

        </section>
    }
</div>